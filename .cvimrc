" SETTINGS 
" {{{
    " Update settings via a local file (and the `:source` command) rather than the default options page in chrome.
    " As long as localconfig is set in the .cvimrc file. cVim will continue to read  settings from there.
    let configpath='/j:/GOOGLE/ext_settings/.cvimrc'
    set localconfig

    let scrollstep=100
    let scrollduration=400
    let completionengines = ['google', 'google-image', 'youtube'] " Show only these engines in the command bar
    set noautofocus
    set scalehints
    set smoothscroll
    let hintcharacters = "wertasdfgzxcv"
    let previousmatchpattern = "((?!last)(prev(ious)?|previous page|newer|back|«|less|<|<-.*|‹| )+)"
    let nextmatchpattern = "((?!first)(next page|.*->|older|more|>|›|»|forward|next| )+)"

    " sometimes was problems with э',Э",ж; within middle string
    let langmap="ё`,йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,яz,чx,сc,мv,иb,тb,ьn,б\\,,ю.,Ё~,ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,ЯZ,ЧX,СC,МV,ИB,ТB,ЬN,Б<,Ю>,э',Э\""
"}}}

" MAP 
    " INPUT BOX {{{
        imap <A-h> backwardWord
        imap <C-h> deleteChar
        imap <A-h> backwardWord
        imap <A-l> forwardWord
    " }}}

    " NORMAL MODE {{{
        " Create a variable that can be used/referenced in the command bar
        let @@reddit_prog = 'https://www.google.ru/?gfe_rd=cr&ei=aTd6V77eFc23zAXU1or4Dw'
        " TA binding opens 'http://www.reddit.com/r/programming/top?sort=top&t=all' in a new tab
        "map C :to @@reddit_prog<CR>
        let @@prog = 'https://www.google.ru/?gfe_rd=cr&ei=aTd6V77eFc23zAXU1or4Dw'
        "map C :@@prog
        "let chr='chrome://extensions<CR>'
        map gE :tabnew chrome://extensions<CR>
        map gB :tabnew chrome://bookmarks<CR>
        map gG :open google<Space>
        map ,g :tabnew google<Space>

        " Open all of these in a tab with `gnb` or open one of these with <N>goa where <N>
        "let qmark a = ["http://www.reddit.com", "http://www.google.com", "http://twitter.com"]
        let qmark m = ["https://e.mail.ru/cgi-bin/msglist?referer=mailchecker"]
        let qmark y = ["https://translate.yandex.ru"]
        let qmark g = ["https://translate.google.com/#en/ru/"]

        let mapleader=","
        map a createHoverHint
        map A createUnhoverHint
        map H :help<CR>
        map S :settings<CR>
        map <Space> :
        map cR reloadAllTabs
        map gar reloadAllTabs
        "map gy :duplicate<CR>
        map gY yankUrl
        map ge goToInput
        map gL goToLastInput
        map gb :buffer<Space>
        map ;n nextTab
        map ;p previousTab
        map ;b B
        map <C-f> scrollFullPageDown
        map <A-f> scrollFullPageDown
        "map <C-b> scrollPageUp
        map <C-o> goBack
        map <C-i> goForward
        unmap <C-b>
        "map <C-b> :bookmarks!<Space>
        "map <leader>s :source<CR>
    " }}}

    " ALIASES {{{
        " alias ':g' to ':tabnew google'
        command g tabnew google
        command ya open ya
        command yat tabnew ya
        command ytt tabnew youtube
        command yt open youtube
        command mdnt tabnew mdn
        command mdn open mdn
        command git open git
        command gitt tabnew git
    " }}}

" SEARCH ENGINES 
" {{{
    let completionengines = ['google', 'wikipedia', 'youtube', 'amazon', 'yandex']
    let searchengine mdn = "https://developer.mozilla.org/ru/search?q=%s"
    let searchengine ya = "https://yandex.ru/search/?text=%s"
    " youtube2mp3
    let searchengine ymp3 = "http://youtubeinmp3.com/download/?video=%s"
    let searchengine git = "https://github.com/search?q=%s"
    let searchengine gsm = "http://www.gsmarena.com/results.php3?sQuickSearch=yes&sName=%s"
    " MVN Central Repository 
    let searchengine mvn = "http://mvnrepository.com/search.html?query=%s"
    let searchengine sc = "http://scholar.google.com.br/scholar?hl=pt-BR&q=%s"
    let searchengine dblp = "http://dblp.uni-trier.de/search?q=%s"
    let searchengine dic = "http://www.thefreedictionary.com/%s"
    let searchengine btr = "http://www.bing.com/translator/?text=%s"
    let searchengine arch = "https://wiki.archlinux.org/index.php?search=%s"
    let searchalias g = "google"
    let searchalias yt = "youtube"
    let searchalias git = "git"
    " let locale = "uk" " Current choices are 'jp' and 'uk'. This allows cVim to use sites like google.co.uk
"}}}

" EXCLUDE KEYS 
" {{{

    " YOUTUBE  {{{
        site '*://*.youtube.com/*' {
              unmap f
              unmap j
              unmap k
              unmap l
              unmap h
              unmap m
              unmap n
              unmap p
              map q createHint
              map Q createTabbedHint
              map a createHint
              map A createTabbedHint
              map z :tabnew google
        }
    "}}}


    " Site-specific Configuration {{{

    " this will enable the config block below on the domain 'reddit.com'
"   site '*://docs.google.com/*'{ 
"         unmap <Space>
"   }

    " }}}

    " BLACKLIST {{{
"       let blacklists = [ 
"                   \"https://mail.google.com/*", "https://mail.google.com/*", "*://mail.google.com/*",
"                   \"*://mail.google.com/*", 
"                   \"https://drive.google.com/*",
"                   \"*://bitbucket.org/*",
"                   \"*://netflix.com/*",
"                   \"https://web.whatsapp.com/*",
"                   \"https://www.duolingo.com/*"
"                   \]
    " }}}

" }}}

" FUNCTIONS
" {{{

" We are now in JavaScript mode within any function

" Variable is used by the code block
"set hintset_a

map <leader>m :call consoleMessage<CR>
"{{{
consoleMessage -> {{
console.log('Hello my dear friend!')
}}
"}}}

map <leader>s :call sourceLocalFile<CR>

"{{{
sourceLocalFile -> {{

// Settings are contained in an object named settings
// settings.hintset_a = !settings.hintset_a;
//if (settings.hintset_a) {
//  settings.hintcharacters = 'abc'; // equivalent to "let hintcharacters = 'abc'"
//} else {
// settings.hintcharacters = 'xyz';
//}

// Propagate the current settings to all tabs for the
// rest of the session
//PORT('syncSettings', { settings: settings });



RUNTIME('loadLocalConfig');
// Display cVim's status bar for 1 seconds.
Status.setMessage('Source is done', 1);
// Display cVim's bottom bar for 1 seconds.
//HUD.display(' -- DONE -- ', 1);

}}
"}}}

map <leader>d :script<Space>javascript: $(document).ready(function(){$("p").click(function(){$(this).hide();});});<CR>
map <leader>i :call pageTitle<CR>
"{{{
pageTitle -> {{


// Display cVim's status bar for 1 seconds.
Status.setMessage(document.title, 2);
// Display cVim's bottom bar for 1 seconds.
HUD.display(location);

}}
"}}}

map <leader>h :call hideHUD<CR>
"{{{
hideHUD -> {{

// Display cVim's bottom bar for 0.1 seconds.
HUD.display('', .1);
    //document.getElementById('leftmenu').style.display = "none !important";
    //document.querySelector("#leftmenu").style.setAttribute('style', 'display:inline !important');
    document.querySelector("#leftmenu").style.cssText = 'display:block !important';
    document.querySelector("#topnav").style.cssText = 'position:fixed !important;top:0px';
    document.querySelector("#right").style.cssText =  'position:absolute !important;right:0px';

}}
"}}}

map <leader>c :call scrollToCenter<CR>
"{{{
scrollToCenter -> {{
//window.scrollX((document.body.offsetWidth)/2)
// window.scrollTo(
//     (document.body.offsetWidth)/2,
//     (document.body.offsetHeight)
// );
/*
* window.scrollTo(x,y) is an efficient cross-broser function,
* which scrolls the document to position X, Y
* document.body.offsetWidth contains the value of the body's width
* document.documentElement contains the value of the document's width
*
* Logic: If you want to center the page, you have to substract
* the body's width from the document's width, then divide it
* by 2.
*/

window.scrollBy(5,0); // horizontal and vertical scroll increments

}}
"}}}

map n :call nextSearchResultToCenter<CR>
"{{{
nextSearchResultToCenter -> {{

Mappings.actions.nextSearchResult(1);
Mappings.actions.centerMatchH();

}}
"}}}

map N :call previousSearchResultToCenter<CR>
"{{{
previousSearchResultToCenter -> {{

Mappings.actions.previousSearchResult(1);
Mappings.actions.centerMatchH();

}}
"}}}

" Stilebot
"{{{
map <leader>p :call leftSide<CR>
"{{{
leftSide-> {{

//function include(url) {
        //var script = document.createElement('script');
        //script.src = url;
        //document.getElementsByTagName('head')[0].appendChild(script);
    //}
//include("http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js");

function myFunc(){


    //document.getElementById("stylebot-arrow-button").getElementByClassName("stylebot-header-button").click();
    //document.getElementById('stylebot').click();
    //document.getElementByClassName("stylebot-button").submit();
    document.getElementById('stylebot').style.left=0 + "px";
    //document.getElementById('stylebot').style.cssText += 'left: 0px !important';


    }
myFunc();
    }}
    "}}}

    map <leader>P :call rightSide<CR>
    "{{{
    rightSide-> {{

    document.getElementById('stylebot').style.left= window.innerWidth - 320 - 2 + "px"; // some padding

    }}
    "}}}
    "}}}

    "map b :call bookmarksNextTab<CR>
    "{{{
    bookmarksNextTab -> {{

    //    Command.show('/');
    //    HUD.hide(true);
    //    HUD.display(' -- INSERT -- ');

    }}
    ""}}}

    " Open an IPython notebook *.ipynb file from Github on nbviewer.ipython.org(exmaple)
    " {{{
    "    map < Leader > i: script < Space > javascript: date = new Date();
    "    url_root = 'http://nbviewer.ipython.org/';
    "    url = null;
    "    gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
    "    github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
    "    https_re = /^https:\/\/(.*\.ipynb)$/;
    "    http_re = /^http:\/\/(.*\.ipynb)$/;
    "    loc = location.href;
    "    if (gist_re.test(loc)) {
    "        gist = gist_re.exec(loc);
    "        url = url_root + gist[1];
    "    } else if (github_re.test(loc)) {
    "        path = github_re.exec(loc);
    "        url = url_root + 'urls/raw.' + path[1] + path[2];
    "    } else if (https_re.test(loc)) {
    "        path = https_re.exec(loc);
    "        url = url_root + 'urls/' + path[1];
    "    } else if (http_re.test(loc)) {
    "        path = http_re.exec(loc);
    "        url = url_root + 'url/' + path[1];
    "    }
    "    if (url) {
    "        void(window.open(url, '_self'));
    "    } < CR >
    " }}}

    " Copy Link Text to the Clipboard(exmaple)
    " {{{
    yankText(link) -> {{
    //  Status.setMessage(link.text,3);
    //  Clipboard.copy(link.text);
    }}
    "map zy createScriptHint(yankText)
    " }}}

    "Copy the current tab title to the Clipboard(exmaple)
    "{{{
    copyCurrentTabTitle -> {{
    //  Status.setMessage(document.title,3);
    //  Clipboard.copy(document.title);
    }}
    "map yt :call copyCurrentTabTitle<CR>
    "}}}

    "map <leader>n :script<Space>javascript:console.log('Hey!');
    " }}}
