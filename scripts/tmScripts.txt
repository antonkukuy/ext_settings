{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Google youtube search link","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/https?:\\/\\/(www\\.)?google\\.(com|(?:com?\\.)?\\w\\w)\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469644799686,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/7784-google-youtube-search-link/code/Google%20youtube%20search%20link.user.js","uuid":"fcc5d484-f1eb-4ff4-9ac7-b8acb61b824d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgR29vZ2xlIHlvdXR1YmUgc2VhcmNoIGxpbmsKLy8gQGluY2x1ZGUgICAgICAgL2h0dHBzPzpcL1wvKHd3d1wuKT9nb29nbGVcLihjb218KD86Y29tP1wuKT9cd1x3KVwvLiovCi8vIEBkZXNjcmlwdGlvbiAgIEFkZHMgYSBZb3V0dWJlIHNlYXJjaCBsaW5rOiBXZWIsIEltYWdlcywgVmlkZW9zLCBZb3V0dWJlLCBOZXdzLCBNYXBzLCBTaG9wcGluZywgLi4uCi8vIEB2ZXJzaW9uICAgICAgIDEuMS4xYQovLyBAYXV0aG9yICAgICAgICB3T3h4T20KLy8gQG5hbWVzcGFjZSAgICAgd094eE9tLnNjcmlwdHMKLy8gQGxpY2Vuc2UgICAgICAgTUlUIExpY2Vuc2UKLy8gQHJ1bi1hdCAgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQHJlcXVpcmUgICAgICBmaWxlOi8vajpcR09PR0xFXGV4dF9zZXR0aW5nc1xzY3JpcHRzXFNlYXJjaEJ1dHRvbnNcc2V0TXV0YXRpb25IYW5kbGVyLmpzCi8vIEByZXF1aXJlICAgICAgZmlsZTovL2o6XEdPT0dMRVxleHRfc2V0dGluZ3Ncc2NyaXB0c1xTaGFyZWRcd2FpdEZvcktleUVsZW1lbnRzLmpzCi8vIEByZXF1aXJlICAgICAgZmlsZTovL2o6XEdPT0dMRVxleHRfc2V0dGluZ3Ncc2NyaXB0c1xTaGFyZWRcanF1ZXJ5Lm1pbl8xXzdfMi5qcwovLyBAcmVxdWlyZSAgICAgIGZpbGU6Ly9qOlxHT09HTEVcZXh0X3NldHRpbmdzXHNjcmlwdHNcU2VhcmNoQnV0dG9uc1xTZWFyY2hfRW5naW5lc19idXR0b25zLnVzZXIuanMKLy8vLyBAcmVxdWlyZSAgICAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3NjcmlwdHMvMTIyMjgvY29kZS9zZXRNdXRhdGlvbkhhbmRsZXIuanMKLy8vLyBAcmVxdWlyZSAgICAgICBodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuNy4yL2pxdWVyeS5taW4uanMKLy8vLyBAcmVxdWlyZSAgICAgICBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9yYXcvMjYyNTg5MS93YWl0Rm9yS2V5RWxlbWVudHMuanMKLy8vLyBAZ3JhbnQgICAgICAgICBHTV9hZGRTdHlsZQovLyA9PS9Vc2VyU2NyaXB0PT0K"},{"name":"SaveFrom.net helper","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["vk.com","vk.me","vk-cdn.net","youtube.com","youtube-nocookie.com","ytimg.com","googlevideo.com","video.google.com","google-analytics.com","dailymotion.com","vimeo.com","vimeocdn.com","odnoklassniki.ru","ok.ru","cdn-ok.com","mycdn.me","pladform.ru","clipyou.ru","soundcloud.com","sndcdn.com","mail.ru","cdninstagram.com","fbcdn.net","facebook.com","sf-helper.com","aviasales.ru","travelpayouts.com","skyscanner.net","hotellook.com","savefrom.net","self","*"],"orig_excludes":["*://google.*/*","*://*.google.*/*","*://acidtests.org/*","*://*.acidtests.org/*"],"orig_includes":["http://*","https://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":["*"],"use_connects":["www.google-analytics.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"$":"sisMonoEmptyValue","$_expire_":"sisMonoEmptyValue","attr":"sisMonoEmptyValue","attr_expire_":"sisMonoEmptyValue","aviaBarNewStyle":"btrue","bind":"sisMonoEmptyValue","bind_expire_":"sisMonoEmptyValue","country":"s{\"w\":\"ru\"}","country_expire_":"s{\"w\":1469643498}","css":"sisMonoEmptyValue","css_expire_":"sisMonoEmptyValue","dblTrack":"s{\"w\":\"67d5449b-872d-4d5d-9dee-0b405833fafe,1473199017133\"}","detach":"sisMonoEmptyValue","detach_expire_":"sisMonoEmptyValue","each":"sisMonoEmptyValue","each_expire_":"sisMonoEmptyValue","fade":"sisMonoEmptyValue","fade_expire_":"sisMonoEmptyValue","focus":"sisMonoEmptyValue","focus_expire_":"sisMonoEmptyValue","form":"sisMonoEmptyValue","form_expire_":"sisMonoEmptyValue","fromId":"n-1","fromIdTimeout":"n1465732002","gmNativeDownload":"n1","hasDP":"uundefined","html":"sisMonoEmptyValue","html_expire_":"sisMonoEmptyValue","lastCountryRequest":"s{\"w\":1467659753}","lastVersion":"s{\"w\":\"6.42.2\"}","lastVersionExpire":"s1438677205","lastVersion_expire_":"s{\"w\":1468049398}","liteStorage":"s{\"w\":{\"metaTimeout\":1473251328,\"metaExpire\":1473228881,\"lastVersion\":\"6.60.2\",\"lastVersionExpire\":1473649376,\"fromIdTimeout\":1467729394,\"trackTimeout\":1473242165,\"fromId\":-1,\"countryRequestTimeout\":1469470697,\"countryTimeout\":1473228880,\"countryExpire\":1473401681}}","meta":"s{\"w\":{\"dp\":{\"enable\":true,\"percent\":100,\"listExp\":true},\"exp\":{\"34\":{\"enable\":true,\"percent\":50},\"51\":{\"enable\":true,\"percent\":50}}}}","metaExpire":"s1438120641","meta_expire_":"s{\"w\":1467792888}","onceTrackAviaBar":"n0","onceYtUmmyBtn":"n1","remove":"sisMonoEmptyValue","remove_expire_":"sisMonoEmptyValue","sel":"sisMonoEmptyValue","sel_expire_":"sisMonoEmptyValue","showUmmyInfo":"n0","sovetnikBlacklist":"o{}","sovetnikEnabled":"n0","sovetnikOfferAccepted":"bfalse","sovetnikRemoved":"bfalse","sovetnikUpdateTime":"n1431647065318","statOpt":"o{\"isAllow\":false}","submit":"sisMonoEmptyValue","submit_expire_":"sisMonoEmptyValue","toggle":"sisMonoEmptyValue","toggle_expire_":"sisMonoEmptyValue","trackTime":"s{\"w\":\"1467706996854\"}","uRadio":"o{\"siteList\":{\"radiorecord.ru\":3,\"tunein.com\":3}}","ummyDetected":"n1","uuid":"sdf53c2ea-58eb-41db-8033-3578bbb7662b","val":"sisMonoEmptyValue","val_expire_":"sisMonoEmptyValue","version":"s{\"w\":\"6.60.2\"}","wheel":"sisMonoEmptyValue","wheel_expire_":"sisMonoEmptyValue","ytDechipList":"s{\"w\":{\"16966\":[[\"swap\",36],[\"splice\",2],[\"swap\",65],[\"reverse\",null],[\"splice\",2],[\"swap\",11],[\"swap\",31]],\"16974\":[[\"reverse\",null],[\"swap\",45],[\"reverse\",null]],\"16976\":[[\"swap\",57],[\"reverse\",null],[\"swap\",57],[\"swap\",38],[\"splice\",3],[\"swap\",47],[\"splice\",2]]}}","ytHide3D":"n1","ytHide3GP":"n1","ytHideAudio_MP4":"n1","ytHideMP4NoAudio":"n1","ytHideWebM":"n1","ytLastITag":"summy"},"ts":1473229729429},"enabled":true,"position":2,"file_url":"https://download.sf-helper.com/chrome/helper.user.js","uuid":"85b71f56-8d95-4978-94c7-f08ffac864fe","source":""},{"name":"YouTube Grid & Preview Player","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["http://www.youtube.com/*","https://www.youtube.com/*"],"orig_noframes":true,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["googleapis.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"autoLoadOther":"btrue","autoLoadSearch":"btrue","defEnable":"btrue","gridEnable":"btrue","gridHist":"btrue","gridPlist":"btrue","gridRel":"btrue","gridSearch":"btrue","gridTrend":"btrue","newTab":"bfalse","playerClose":"btrue","playerDef":"sdefault","playerDim":"btrue","playerEnable":"btrue","playerFit":"bfalse","playerFocus":"bfalse","playerNext":"btrue","playerPause":"btrue","playerPos":"s11","playerPosAuto":"bfalse","playerSize":"slarge","rateEnable":"btrue","userLink":"bfalse","ytFocus":"bfalse"},"ts":1471843871976},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/12998-youtube-grid-preview-player/code/YouTube%20Grid%20%20Preview%20Player.user.js","uuid":"1861a35a-db70-41c8-adb9-bfec6440689f","source":""},{"name":"Reading content","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://wikipedia.tld/*","http://*.wikipedia.tld/*","http://wikipedia.org/*","http://*.wikipedia.org/*","https://developer.chrome.com/*","http://developer.chrome.com/*","http://www.w3schools.com/*","https://www.w3schools.com/*","https://wikipedia.org/*","https://*.wikipedia.org/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469951850916,"data":{}},"enabled":true,"position":4,"uuid":"80288d2d-270e-4f6d-a372-e1a7c740b88b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBSZWFkaW5nIGNvbnRlbnQKLy8gQG5hbWVzcGFjZSAgICBjb250ZW50UmVhZAovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAZGVzY3JpcHRpb24gIENsZWFyIGhlYWQgYW5kIGxlZnQgc2lkZWJhciB1cCBlLmkgaXQgaW1wcm92ZXMgcmVhZGFiaWxpdHkgb2YgY29udGVudC4KLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQGluY2x1ZGUgICAgICAgaHR0cDovL3dpa2lwZWRpYS50bGQvKgovLyBAaW5jbHVkZSAgICAgICBodHRwOi8vKi53aWtpcGVkaWEudGxkLyoKLy8vLyBTaW5jZSBUTEQgZG9lc24ndCB3b3JrIGluIENocm9tZToKLy8gQGluY2x1ZGUgICAgICAgaHR0cDovL3dpa2lwZWRpYS5vcmcvKgovLyBAaW5jbHVkZSAgICAgICBodHRwOi8vKi53aWtpcGVkaWEub3JnLyoKLy8gQGluY2x1ZGUgICAgICAgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgIGh0dHA6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgIGh0dHA6Ly93d3cudzNzY2hvb2xzLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgIGh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vKgovLy8vIGh0dHBzOgovLyBAaW5jbHVkZSAgICAgICBodHRwczovL3dpa2lwZWRpYS5vcmcvKgovLyBAaW5jbHVkZSAgICAgICBodHRwczovLyoud2lraXBlZGlhLm9yZy8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIHdpa2lwZWRpYQp2YXIgdmVyaWZ5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKTsKaWYgKHZlcmlmeSl7CnZhciBjb250ZW50TWFyZ2luID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKS5zdHlsZS5tYXJnaW5MZWZ0OwogICAgaWYgKGNvbnRlbnRNYXJnaW4gIT0gIjBweCIpIHsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXctbmF2aWdhdGlvbicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ213LXBhZ2UtYmFzZScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKS5zdHlsZS5tYXJnaW5MZWZ0ID0gIjBweCI7CiAgICB9IGVsc2UgewogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtdy1uYXZpZ2F0aW9uJykuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtdy1wYWdlLWJhc2UnKS5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKS5zdHlsZS5tYXJnaW5MZWZ0ID0gIiI7CiAgICB9Cn0KCi8vY29uc29sZS5sb2coJ3RoYXQgd29yaycpOwovLyAgIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vKgp2YXIgdmVyaWZ5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2W2l0ZW1wcm9wPSJhcnRpY2xlQm9keSJdJyk7CmlmKHZlcmlmeSl7CnZhciBjb250ZW50TWFyZ2luQ2hyb21lRGV2ZWxvcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2W2l0ZW1wcm9wPSJhcnRpY2xlQm9keSJdJykuc3R5bGUubWFyZ2luTGVmdDsKICAgIGlmIChjb250ZW50TWFyZ2luQ2hyb21lRGV2ZWxvcGVyICE9ICIwcHgiKSB7CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2W2l0ZW1wcm9wPSJhcnRpY2xlQm9keSJdJykuc3R5bGUubWFyZ2luTGVmdCA9ICIwcHgiOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ25hdi5pbmxpbmUtdG9jLm5vLXBlcm1hbGluaycpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbmF2LmlubGluZS1zaXRlLXRvYy5uby1wZXJtYWxpbmsnKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgfSBlbHNlIHsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXZbaXRlbXByb3A9ImFydGljbGVCb2R5Il0nKS5zdHlsZS5tYXJnaW5MZWZ0ID0gIiI7CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbmF2LmlubGluZS10b2Mubm8tcGVybWFsaW5rJykuc3R5bGUuZGlzcGxheSA9ICIiOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ25hdi5pbmxpbmUtc2l0ZS10b2Mubm8tcGVybWFsaW5rJykuc3R5bGUuZGlzcGxheSA9ICIiOwogICAgfQp9Ci8vY29uc29sZS5sb2coJ3RoYXQgd29yaycpOwovLyAgIGh0dHA6Ly93d3cudzNzY2hvb2xzLmNvbS8KdmFyIHZlcmlmeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNiZWxvd3RvcG5hdicpOwppZih2ZXJpZnkpewp2YXIgY29udGVudE1hcmdpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNiZWxvd3RvcG5hdicpLnN0eWxlLm1hcmdpbkxlZnQ7CiAgICBpZiAoY29udGVudE1hcmdpbiAhPSAiMHB4IikgewogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNiZWxvd3RvcG5hdicpLnN0eWxlLm1hcmdpbkxlZnQgPSAiMHB4IjsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbicpLnN0eWxlLndpZHRoID0gIjEwMCUiOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b3BuYXYnKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsZWZ0bWVudWlubmVyJykuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICAvL2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWRlbmF2Jykuc3R5bGUuZGlzcGxheSA9ICJub25lICFpbXBvcnRhbnQiOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi53My1zaWRlbmF2LnczLWNvbGxhcHNlLnczLXNsaW0nKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgfSBlbHNlIHsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYmVsb3d0b3BuYXYnKS5zdHlsZS5tYXJnaW5MZWZ0ID0gIiI7CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvcG5hdicpLnN0eWxlLmRpc3BsYXkgPSAiIjsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGVmdG1lbnVpbm5lcicpLnN0eWxlLmRpc3BsYXkgPSAiIjsKICAgICAgICAvL2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWRlbmF2Jykuc3R5bGUuZGlzcGxheSA9ICIiOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi53My1zaWRlbmF2LnczLWNvbGxhcHNlLnczLXNsaW0nKS5zdHlsZS5kaXNwbGF5ID0gIiI7CiAgICB9Cn0KCg=="},{"name":"Wikipedia Inline Article Viewer","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://wikipedia.tld/*","http://*.wikipedia.tld/*","http://wikipedia.org/*","http://*.wikipedia.org/*","https://wikipedia.org/*","https://*.wikipedia.org/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469648549282,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/7678-wikipedia-inline-article-viewer/code/Wikipedia%20Inline%20Article%20Viewer.user.js","uuid":"b8fd3e59-dd37-4a2e-9c2f-81b99df54673","source":""},{"name":"Hover Preview_native","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":["http://wikipedia.tld/*","http://*.wikipedia.tld/*","http://wikipedia.org/*","http://*.wikipedia.org/*","https://wikipedia.org/*","https://*.wikipedia.org/*","http://www.youtube.com/*","https://www.youtube.com/*"],"orig_includes":["*","http://*","https://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1470004582446,"data":{}},"enabled":true,"position":6,"uuid":"3e3a94e1-8f85-41aa-9734-ce490871798c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIEhvdmVyIFByZXZpZXdfbmF0aXZlCi8vIEBuYW1lc3BhY2UgICAgICBIUAovLyBAZGVzY3JpcHRpb24gICAgUG9wcyB1cCBhIGZsb2F0aW5nIGRpdiB3aGVuIHlvdSBob3ZlciBvdmVyIGEgbGluaywgY29udGFpbmluZyB0aGUgdGFyZ2V0IHBhZ2UhCi8vIEB2ZXJzaW9uICAgICAgICAwLjEKLy8gQHJlcXVpcmUgICAgICAgIGZpbGU6Ly9qOlxHT09HTEVcZXh0X3NldHRpbmdzXHNjcmlwdHNcSG92ZXIgUHJldmlldy51c2VyLmpzCi8vIEBpbmNsdWRlICAgICAgICAqCi8vIEBpbmNsdWRlICAgICAgICBodHRwOi8vKgovLyBAaW5jbHVkZSAgICAgICAgaHR0cHM6Ly8qCi8vIEBleGNsdWRlICAgICAgICBodHRwOi8vd2lraXBlZGlhLnRsZC8qCi8vIEBleGNsdWRlICAgICAgICBodHRwOi8vKi53aWtpcGVkaWEudGxkLyoKLy8vLyBTaW5jZSBUTEQgZG9lc24ndCB3b3JrIGluIENocm9tZToKLy8gQGV4Y2x1ZGUgICAgICAgIGh0dHA6Ly93aWtpcGVkaWEub3JnLyoKLy8gQGV4Y2x1ZGUgICAgICAgIGh0dHA6Ly8qLndpa2lwZWRpYS5vcmcvKgovLy8vIGh0dHBzOgovLyBAZXhjbHVkZSAgICAgICAgaHR0cHM6Ly93aWtpcGVkaWEub3JnLyoKLy8gQGV4Y2x1ZGUgICAgICAgIGh0dHBzOi8vKi53aWtpcGVkaWEub3JnLyoKLy8vLwovLyBAZXhjbHVkZSAgICAgICAgaHR0cDovL3d3dy55b3V0dWJlLmNvbS8qCi8vIEBleGNsdWRlICAgICAgICBodHRwczovL3d3dy55b3V0dWJlLmNvbS8qCi8vIEBjb25uZWN0ICAgICAgICAqCi8vID09L1VzZXJTY3JpcHQ9PQo="},{"name":"Hover Preview","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":["http://wikipedia.tld/*","http://*.wikipedia.tld/*","http://wikipedia.org/*","http://*.wikipedia.org/*","https://wikipedia.org/*","https://*.wikipedia.org/*","http://www.youtube.com/*","https://www.youtube.com/*"],"orig_includes":["*","http://*","https://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469647568253,"data":{}},"enabled":false,"position":7,"file_url":"https://greasyfork.org/scripts/8042-hover-preview/code/Hover%20Preview.user.js","uuid":"482f7703-dfdb-4c7f-af55-fc72f86df2dd","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIEhvdmVyIFByZXZpZXcKLy8gQG5hbWVzcGFjZSAgICAgIEhQCi8vIEBkZXNjcmlwdGlvbiAgICBQb3BzIHVwIGEgZmxvYXRpbmcgZGl2IHdoZW4geW91IGhvdmVyIG92ZXIgYSBsaW5rLCBjb250YWluaW5nIHRoZSB0YXJnZXQgcGFnZSEKLy8gQGluY2x1ZGUgICAgICAgICoKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly8qCi8vIEBpbmNsdWRlICAgICBodHRwczovLyoKLy8gQGV4Y2x1ZGUgICAgICAgaHR0cDovL3dpa2lwZWRpYS50bGQvKgovLyBAZXhjbHVkZSAgICAgICBodHRwOi8vKi53aWtpcGVkaWEudGxkLyoKLy8vLyBTaW5jZSBUTEQgZG9lc24ndCB3b3JrIGluIENocm9tZToKLy8gQGV4Y2x1ZGUgICAgICAgaHR0cDovL3dpa2lwZWRpYS5vcmcvKgovLyBAZXhjbHVkZSAgICAgICBodHRwOi8vKi53aWtpcGVkaWEub3JnLyoKLy8vLyBodHRwczoKLy8gQGV4Y2x1ZGUgICAgICAgaHR0cHM6Ly93aWtpcGVkaWEub3JnLyoKLy8gQGV4Y2x1ZGUgICAgICAgaHR0cHM6Ly8qLndpa2lwZWRpYS5vcmcvKgovLy8vIAovLyBAZXhjbHVkZSAgICAgICBodHRwOi8vd3d3LnlvdXR1YmUuY29tLyoKLy8gQGV4Y2x1ZGUgICAgICAgaHR0cHM6Ly93d3cueW91dHViZS5jb20vKgovLyBAY29ubmVjdCAgICAgICAqCi8vIEB2ZXJzaW9uIDAuMC4xLjIwMTUwMjEzMDM1MDQ2Ci8vID09L1VzZXJTY3JpcHQ9PQoKLy8gVE9ETzoKLy8gRG9uJ3QgYWN0IGlmIHRoZSB0YXJnZXQgaXMgYSBmaWxlLXR5cGUuICBpLmUuIHdlIGRvbid0IHdhbnQgdG8gYmUgcHJvbXB0ZWQKLy8gdG8gc2F2ZSBhIHppcCBmaWxlIGp1c3QgYmVjYXVzZSB3ZSBob3ZlcmVkIG9uIGl0LgovLyBLTk9XTiBVTkZJWEFCTEUgQlVHOgovLyBEYW1uaXQgc29tZSBwYWdlcyBicmVhayBvdXQgb2YgdGhlIGlmcmFtZSEgIERvbid0IHRyeSB0byB1c2UgdGhpcyBvbgovLyBTdGFja092ZXJmbG93IGxpbmtzIQoKLy8gaWYgKHdpbmRvdy5kb2N1bWVudCAhPSBkb2N1bWVudCkgewoJLy8gcmV0dXJuOyAvLyBEb24ndCBydW4gaW4gaWZyYW1lcwovLyB9CgovLyBRdWl0ZSBuaWNlIG9uIGFwYWNoZSBmaWxlIGxpc3RpbmdzIG9mIC5qcGVncywgYnV0IGEgYml0IHNsb3cuICBJZGVhbGx5IHByZS1sb2FkIGhvdmVyYWJsZSBpbWFnZXM/Ci8vIENvdWxkIGJlIGEgYml0IGhlYXZ5LiAgSXQgZGVwZW5kcyBvbiB0aGUgcGFnZS4uLgovLyBBIGRpZmZlcmVudCBib29rbWFya2xldCB0byB0dXJuIGFsbCAibGlua3MgdG8gaW1hZ2VzIiBpbnRvICJpbWFnZXMiIHdvdWxkIGJlIG5pY2UuIDopCgp2YXIgZm9jdXNSZWFjdGlvblRpbWUgPSAxMDA7CnZhciB1bmZvY3VzUmVhY3Rpb25UaW1lID0gNTAwOwoKdmFyIGZvY3VzID0gdW5kZWZpbmVkOwp2YXIgbGFzdEZvY3VzID0gdW5kZWZpbmVkOwp2YXIgdGltZXIgPSBudWxsOwoKdmFyIG15UG9wdXA7CnZhciBteUZyYW1lOwoKdmFyIGlzT3ZlclBvcHVwID0gZmFsc2U7CgpmdW5jdGlvbiBjaGVja0ZvY3VzKCkgewoJaWYgKGZvY3VzKSB7CgkJLy8gaWYgKGZvY3VzID09IGxhc3RGb2N1cykgewoJCQkvLyBVc2VyIGhhcyBkZWZpbml0ZWx5IGJlZW4gaGVyZSBhIHdoaWxlCgkJCXNob3dQcmV2aWV3V2luZG93KGZvY3VzKTsKCQkvLyB9IGVsc2UgewoJCS8vIH0KCQkvLyBsYXN0Rm9jdXMgPSBmb2N1czsKCX0KfQoKZnVuY3Rpb24gZWVrQU1vdXNlKGV2dCkgewoJaWYgKGV2dC5jdXJyZW50VGFyZ2V0LnRhZ05hbWUgIT09ICJBIikgewoJCXJldHVybjsKCX0KCWlmICghZm9jdXMgJiYgZXZ0LmFsdEtleSkgewoJCWZvY3VzID0gZXZ0LmN1cnJlbnRUYXJnZXQ7CgkJLy8gc2V0VGltZW91dCgnY2hlY2tGb2N1cygpOycsZm9jdXNSZWFjdGlvblRpbWUpOwoJCS8vIEhhY2sgdG8gYnJpbmcgdGhlIHBvcHVwIGJhY2sgaW1tZWRpYXRlbHkgaWYgd2UndmUgZ29uZSBiYWNrIHRvIHRoZSBzYW1lIGxpbmsuCgkJaWYgKG15RnJhbWUgJiYgZm9jdXMuaHJlZiAmJiBteUZyYW1lLmhyZWYgPT0gZm9jdXMuaHJlZikgewoJCQlzaG93UHJldmlld1dpbmRvdyhmb2N1cyxldnQpOwoJCX0gZWxzZSB7CgkJCWlmICh0aW1lcikgewoJCQkJY2xlYXJUaW1lb3V0KHRpbWVyKTsKCQkJfQoJCQl0aW1lciA9IHNldFRpbWVvdXQoY2hlY2tGb2N1cyxmb2N1c1JlYWN0aW9uVGltZSk7CgkJfQoJfSBlbHNlIHsKCQl3aW5kb3cuc3RhdHVzID0gIkFscmVhZHkgZm9jdXNlZCBvbiBhIGxpbmsgd3RmISI7Cgl9Cn0KCmZ1bmN0aW9uIHBoZXdNb3VzZUdvbmUoZXZ0KSB7CglpZiAoZXZ0LmN1cnJlbnRUYXJnZXQudGFnTmFtZSAhPT0gIkEiKSB7CgkJcmV0dXJuOwoJfQoJZm9jdXMgPSB1bmRlZmluZWQ7CglpZiAodGltZXIpIHsKCQljbGVhclRpbWVvdXQodGltZXIpOwoJfQoJLy8gVEVTVElORzogRG9uJ3QgaGlkZSB0aGUgcG9wdXAgaWYgbW91c2UgaXMgY3VycmVudGx5IG92ZXIgdGhlIHBvcHVwIQoJdGltZXIgPSBzZXRUaW1lb3V0KGNsZWFyUG9wdXAsdW5mb2N1c1JlYWN0aW9uVGltZSk7Cn0KCmZ1bmN0aW9uIGNsZWFyUG9wdXAoZSkgewoJaWYgKGlzT3ZlclBvcHVwIHx8IGZvY3VzKQoJCXJldHVybjsKCWlmIChteVBvcHVwKSB7CgkJLy8gbXlQb3B1cC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG15UG9wdXApOwoJCS8vIG15UG9wdXAgPSB1bmRlZmluZWQ7IC8vIGV3dyBjYWNoZSBpdCEKCQlteVBvcHVwLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7Cgl9Cn0KCi8vIERPTkU6IElmIHRoZSB1c2VyIGNsaWNrcyBhIGxpbmssIHRoaXMgaXNuJ3QgcmVhbGx5IGEgaG92ZXIsIHNvIHdlIHNob3VsZCBub3QKLy8gYWN0aXZhdGUgYW5kIGp1c3QgbGV0IHRoZSB1c2VyJ3MgY2xpY2sgYmUgcHJvY2Vzc2VkIQpmdW5jdGlvbiBhQ2xpY2soZXZ0KSB7Cglmb2N1cyA9IHVuZGVmaW5lZDsKfQoKZnVuY3Rpb24gY3JlYXRlUG9wdXAoKSB7CgkvLyBDcmVhdGUgZnJhbWUKCW15UG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKTsKCS8qKiBTZWVtcyBzdHlsZSBkb2VzIG5vdCB3b3JrIGZvciBLb25xdWVyb3IgdGhpcyB3YXkuICoqLwoJbXlQb3B1cC5pbm5lckhUTUwgPQoJCSI8U1RZTEUgdHlwZT0ndGV4dC9jc3MnPiBpZnJhbWUucHJldmlldyB7IGNvbG9yOiAjZmY4ODIyOyBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyBtYXJnaW46IDBweDsgcGFkZGluZzogMnB4OyBib3JkZXI6IDJweCBzb2xpZCByZWQ7IHRleHQtYWxpZ246IGNlbnRlcjsgfSA8L1NUWUxFPiIKCQkrCgkJIjxJRlJBTUUgY2xhc3M9J3ByZXZpZXcnICBtZXRob2Q9J3Bvc3QnIHdpZHRoPSciKyh3aW5kb3cuaW5uZXJXaWR0aCowLjgpKyInIGhlaWdodD0nIisod2luZG93LmlubmVySGVpZ2h0KjAuOSkrIicgc3JjPSdhYm91dDpibGFuayc+PC9JRlJBTUU+IjsKCW15UG9wdXAuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdmVyIiwgZnVuY3Rpb24oZXZ0KSB7IGlzT3ZlclBvcHVwPXRydWU7IH0sIGZhbHNlKTsKCW15UG9wdXAuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdXQiLCBmdW5jdGlvbihldnQpIHsgaXNPdmVyUG9wdXA9ZmFsc2U7IHNldFRpbWVvdXQoY2xlYXJQb3B1cCx1bmZvY3VzUmVhY3Rpb25UaW1lKTsgfSwgZmFsc2UpOwogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImtleXVwIiwgZnVuY3Rpb24oZXZ0KSB7IGlmKGV2dC5rZXlDb2RlID09IDI3KXsgaXNPdmVyUG9wdXA9ZmFsc2U7IHNldFRpbWVvdXQoY2xlYXJQb3B1cCx1bmZvY3VzUmVhY3Rpb25UaW1lKTsgfSB9LCBmYWxzZSk7CgoJZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKG15UG9wdXApOwoJLyoKCW15UG9wdXAuc3R5bGUuYm9yZGVyID0gIjRweCBzb2xpZCB3aGl0ZSI7CglteVBvcHVwLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjMDA0NDAwIjsKCW15UG9wdXAuc3R5bGUubWFyZ2luID0gIjRweCI7CglteVBvcHVwLnN0eWxlLnBhZGRpbmcgPSAiNHB4IjsKCSovCgkvL215UG9wdXAuc3R5bGUud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAqIDAuOSArICJweCI7CgkvL215UG9wdXAuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICogMC45ICsgInB4IjsKCW15UG9wdXAuc3R5bGUucG9zaXRpb24gPSAiZml4ZWQiOwoJbXlQb3B1cC5zdHlsZS5yaWdodCA9ICIxMnB4IjsKCW15UG9wdXAuc3R5bGUuYm90dG9tID0gIjEycHgiOwoJbXlQb3B1cC5zdHlsZS56SW5kZXggPSAiMTAwMDAiOwoJbXlGcmFtZSA9IG15UG9wdXAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0lGUkFNRScpWzBdOwp9CgpmdW5jdGlvbiBzaG93UHJldmlld1dpbmRvdyhsaW5rLGV2dCkgewoJaWYgKCFteUZyYW1lKSB7CgkJY3JlYXRlUG9wdXAoKTsKCX0KCW15UG9wdXAuc3R5bGUuZGlzcGxheSA9ICcnOwoJaWYgKCFteUZyYW1lLnNyYyB8fCBteUZyYW1lLnNyYyAhPSBsaW5rLmhyZWYpCgkJbXlGcmFtZS5zcmMgPSBsaW5rLmhyZWY7Cn0KCmZ1bmN0aW9uIGluaXQoKSB7Cglmb3IgKHZhciBpPTA7aTxkb2N1bWVudC5saW5rcy5sZW5ndGg7aSsrKSB7CgkJdmFyIGxpbmsgPSBkb2N1bWVudC5saW5rc1tpXTsKCQkvKiogQXBwYXJlbnRseSBkZXByZWNhdGVkLiAqKi8KCQkvLyBsaW5rLm9ubW91c2VvdmVyID0gZWVrQU1vdXNlOwoJCS8vIGxpbmsub25tb3VzZW91dCA9IHBoZXdNb3VzZUdvbmU7CgkJLyoqIFRoZSBuZXcgd2F5OiAqKi8KCQlsaW5rLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIGVla0FNb3VzZSwgZmFsc2UpOwoJCWxpbmsuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdXQiLCBwaGV3TW91c2VHb25lLCBmYWxzZSk7CgkJbGluay5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGFDbGljaywgZmFsc2UpOwoJCS8vIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vtb3ZlIiwgZnVuY3Rpb24oZXZ0KSB7IGxvY2F0ZShldnQpOyB9LCB0cnVlKTsKCX0KfQoKaW5pdCgpOwoKLy8gd2luZG93LmRvY3VtZW50LmNoZWNrRm9jdXMgPSBjaGVja0ZvY3VzOwoK"},{"name":"Various things","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://www.google.*/search?*","http://www.google.*/search?*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1470020067790,"data":{}},"enabled":true,"position":8,"uuid":"6e7527ea-04fd-4498-9b61-4406ba2703bb","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBWYXJpb3VzIHRoaW5ncwovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAZGVzY3JpcHRpb24gIHRyeSB0byB0YWtlIG92ZXIgdGhlIHdvcmxkIQovLyBAYXV0aG9yICAgICAgIFlvdQovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS9qcXVlcnkubWluLmpzCi8vLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy5nb29nbGUuKi8qICAgICAgICAgLy8gZG9uJ3Qgd29yawovLyBAaW5jbHVkZSAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLiovc2VhcmNoPyoKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly93d3cuZ29vZ2xlLiovc2VhcmNoPyoKLy8vLyBAaW5jbHVkZSAgICAgICAgaHR0cDovL3JhbmRvbXdvcmQuY29tLwovLy8vIEBpbmNsdWRlICAgICAgICBodHRwczovL3JhbmRvbXdvcmQuY29tLwovLy8vIEBpbmNsdWRlICAgICAgICBodHRwczovL3d3dy5nb29nbGUucnUvc2VhcmNoP3E9dHJhbnNsYXRlK3RvK2VuZ2xpc2gqCi8vLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly93d3cuZ29vZ2xlLnJ1L3NlYXJjaD9xPXRyYW5zbGF0ZSt0bytlbmdsaXNoKgovLy8vIEBpbmNsdWRlICAgICAgICBodHRwczovL3d3dy5nb29nbGUucnUvc2VhcmNoP3E9dHJhbnNsYXRlK3RvK3J1c3NpYW4qCi8vLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly93d3cuZ29vZ2xlLnJ1L3NlYXJjaD9xPXRyYW5zbGF0ZSt0bytydXNzaWFuKgovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LWVuZAovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgovKgpzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICB2YXIgYmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hkdGInKTsKaWYoYmFyKXsKICAgIGJhci5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7Cn0KICAgIH0sIDEwMDApOwoqLwoKZnVuY3Rpb24gbWFpbigpIHsKICAgICAvL2FsZXJ0KCdIZWxsbyBXb3JsZCEnKTsKICAgIC8vY2hyb21lLmV4dGVuc2lvbi5nZXRCYWNrZ3JvdW5kUGFnZSgpLmNvbnNvbGUubG9nKCdmb28nKTsKICAgICQoJy5fTEouX3F4Zy54cGRhcnIuX1dHaC52a19hcmMnKS5jbGljaygpOwp9CnNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAkKCdkaXYuX0xKLl9xeGcueHBkYXJyLl9XR2gudmtfYXJjJykuY2xpY2soKTsKICAgICAgIC8vICQoJyNyYW5kb21fd29yZCcpLmRibGNsaWNrKCk7Ci8vYWxlcnQoICJZb3UgaGF2ZSAiICsgJCgiI3JhbmRvbV93b3JkIikuc2l6ZSgpICsgIiBlbGVtZW50cyIgKTsKICAgIH0sIDMwMDApOwogICAgLy8kKCcuX0xKJykuY2xpY2soKTsKLy9hbGVydCggIllvdSBoYXZlICIgKyAkKCJkaXYuX0xKLl9xeGcueHBkYXJyLl9XR2gudmtfYXJjIikuc2l6ZSgpICsgIiBlbGVtZW50cyIgKTsKLy92YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7Ci8vc2NyaXB0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcoJysgbWFpbiArJykoKTsnKSk7Ci8vKGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmFwcGVuZENoaWxkKHNjcmlwdCk7"},{"name":"Simple YouTube MP3 Button","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.youtube.com/watch?v=*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1467663945114,"data":{}},"enabled":false,"position":9,"file_url":"https://greasyfork.org/scripts/20015-simple-youtube-mp3-button/code/Simple%20YouTube%20MP3%20Button.user.js","uuid":"68a84093-97cc-4aa0-85ac-5a0c0df15cf3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTaW1wbGUgWW91VHViZSBNUDMgQnV0dG9uCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly93d3cueW91dHViZWlubXAzLmNvbQovLyBAdmVyc2lvbiAgICAgIDEuMC4yLjIKLy8gQGRlc2NyaXB0aW9uICBBZGRzIGEgZG93bmxvYWQgYnV0dG9uIHRvIFlvdVR1YmUgdmlkZW9zIHdoaWNoIGFsbG93cyB5b3UgdG8gZG93bmxvYWQgdGhlIE1QMyBvZiB0aGUgdmlkZW8gd2l0aG91dCBoYXZpbmcgdG8gbGVhdmUgdGhlIHBhZ2UKLy8gQGF1dGhvciAgICAgICBBcmFyaQovLyBAbWF0Y2ggICAgICAgICo6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0qCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtZW5kCi8vID09L1VzZXJTY3JpcHQ9PQpzdGFydCgpOwogICAgICAgICAgCmZ1bmN0aW9uIHN0YXJ0KCkgewogIHZhciBwYWdlY29udGFpbmVyPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWdlLWNvbnRhaW5lcicpOwogIGlmICghcGFnZWNvbnRhaW5lcikgcmV0dXJuOwogIGlmICgvXmh0dHBzPzpcL1wvd3d3XC55b3V0dWJlLmNvbVwvd2F0Y2hcPy8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikpIHJ1bigpOyAgICAgICAKICB2YXIgaXNBamF4PS9jbGFzc1tcd1xzIictPV0rc3BmXC1saW5rLy50ZXN0KHBhZ2Vjb250YWluZXIuaW5uZXJIVE1MKTsKICB2YXIgbG9nb2NvbnRhaW5lcj1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9nby1jb250YWluZXInKTsgIAogIGlmIChsb2dvY29udGFpbmVyICYmICFpc0FqYXgpIHsgLy8gZml4IGZvciBibG9ja2VkIHZpZGVvcwogICAgaXNBamF4PSgnICcrbG9nb2NvbnRhaW5lci5jbGFzc05hbWUrJyAnKS5pbmRleE9mKCcgc3BmLWxpbmsgJyk+PTA7CiAgfQogIHZhciBjb250ZW50PWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50Jyk7CiAgaWYgKGlzQWpheCAmJiBjb250ZW50KSB7IC8vIEFqYXggVUkKICAgICAgdmFyIG1vPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyfHx3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjsKICAgICAgaWYodHlwZW9mIG1vIT09J3VuZGVmaW5lZCcpIHsKICAgICAgICB2YXIgb2JzZXJ2ZXI9bmV3IG1vKGZ1bmN0aW9uKG11dGF0aW9ucykgewogICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgICAgICAgICAgICBpZihtdXRhdGlvbi5hZGRlZE5vZGVzIT09bnVsbCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24uYWRkZWROb2Rlc1tpXS5pZD09J3dhdGNoNy1jb250YWluZXInIHx8CiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uLmFkZGVkTm9kZXNbaV0uaWQ9PSd3YXRjaDctbWFpbi1jb250YWluZXInKSB7IC8vIG9sZCB2YWx1ZTogbW92aWVfcGxheWVyCiAgICAgICAgICAgICAgICAgICAgICBydW4oKTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGNvbnRlbnQsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTsgLy8gb2xkIHZhbHVlOiBwYWdlY29udGFpbmVyCiAgICAgIH0gZWxzZSB7IC8vIE11dGF0aW9uT2JzZXJ2ZXIgZmFsbGJhY2sgZm9yIG9sZCBicm93c2VycwogICAgICAgIHBhZ2Vjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgb25Ob2RlSW5zZXJ0ZWQsIGZhbHNlKTsKICAgICAgfQogIH0gCn0KCmZ1bmN0aW9uIG9uTm9kZUluc2VydGVkKGUpIHsgCiAgICBpZiAoZSAmJiBlLnRhcmdldCAmJiAoZS50YXJnZXQuaWQ9PSd3YXRjaDctY29udGFpbmVyJyB8fCAKICAgICAgICBlLnRhcmdldC5pZD09J3dhdGNoNy1tYWluLWNvbnRhaW5lcicpKSB7IC8vIG9sZCB2YWx1ZTogbW92aWVfcGxheWVyCiAgICAgIHJ1bigpOwogIH0KfQoKZnVuY3Rpb24gZmluYWxCdXR0b24oKXsKCQoJdmFyIGJ1dHRvbklmcmFtZURvd25sb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaWZyYW1lIik7CglidXR0b25JZnJhbWVEb3dubG9hZC5zcmMgPSAnLy93d3cueW91dHViZWlubXAzLmNvbS93aWRnZXQvYnV0dG9uLz9jb2xvcj1iYTE3MTcmYW1wO3ZpZGVvPScgKyB3aW5kb3cubG9jYXRpb24uaHJlZjsKCWJ1dHRvbklmcmFtZURvd25sb2FkLnNjcm9sbGluZyA9ICJubyI7CglidXR0b25JZnJhbWVEb3dubG9hZC5pZCA9ICJidXR0b25JZnJhbWUiOwoJYnV0dG9uSWZyYW1lRG93bmxvYWQuc3R5bGUgPSAid2lkdGg6MTAwJTtoZWlnaHQ6NjBweDtwYWRkaW5nLXRvcDoyMHB4O3BhZGRpbmctYm90dG9tOjIwcHg7IjsKCQoJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIndhdGNoLWhlYWRlciIpLmFwcGVuZENoaWxkKGJ1dHRvbklmcmFtZURvd25sb2FkKTsKCQp9CgpmdW5jdGlvbiBydW4oKXsKCQoJaWYoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJ1dHRvbklmcmFtZSIpID09PSBudWxsICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnN1YnN0cmluZygwLCAyNSkuaW5kZXhPZigieW91dHViZS5jb20iKSA+IC0xICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoIndhdGNoP3Y9IikgPiAtMSl7CgkJCgkJdmFyIHBhcmVudEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoJCQoJCXBhcmVudEJ1dHRvbi5jbGFzc05hbWUgPSAieXQtdWl4LWJ1dHRvbiB5dC11aXgtYnV0dG9uLWRlZmF1bHQiOwoJCXBhcmVudEJ1dHRvbi5pZCA9ICJwYXJlbnRCdXR0b24iOwoJCXBhcmVudEJ1dHRvbi5zdHlsZSA9ICJoZWlnaHQ6IDIzcHg7bWFyZ2luLWxlZnQ6IDI4cHg7cGFkZGluZy1ib3R0b206MXB4OyI7CgkJCgkJcGFyZW50QnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7CgkJCQoJCQl0aGlzLnN0eWxlID0gImRpc3BsYXk6bm9uZSI7CgkJCWZpbmFsQnV0dG9uKCk7CgkJCQoJCX07CgkJCgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIndhdGNoNy11c2VyLWhlYWRlciIpLmFwcGVuZENoaWxkKHBhcmVudEJ1dHRvbik7CgkJCgkJdmFyIGNoaWxkQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOwoJCQoJCWNoaWxkQnV0dG9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJEb3dubG9hZCBNUDMiKSk7CgkJCgkJY2hpbGRCdXR0b24uY2xhc3NOYW1lID0gInl0LXVpeC1idXR0b24tY29udGVudCI7CgkJY2hpbGRCdXR0b24uc3R5bGUgPSAibGluZS1oZWlnaHQ6IDI1cHg7Zm9udC1zaXplOiAxMnB4OyI7CgkJCgkJcGFyZW50QnV0dG9uLmFwcGVuZENoaWxkKGNoaWxkQnV0dG9uKTsKCQkKCX0KCQp9"},{"name":"Youtube MP3 Download Button","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["http*://www.youtube.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469599457286,"data":{}},"enabled":false,"position":10,"file_url":"https://greasyfork.org/scripts/4992-youtube-mp3-download-button/code/Youtube%20MP3%20Download%20Button.user.js","uuid":"0a87a5ba-b557-405e-b13b-1263b239134d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgWW91dHViZSBNUDMgRG93bmxvYWQgQnV0dG9uCi8vIEBuYW1lc3BhY2UgIGh0dHA6Ly9uaW5qYXN1bml0ZS5jb20KLy8gQHZlcnNpb24gICAgMS4xCi8vIEBkZXNjcmlwdGlvbiAgQWRkcyBhIE1QMyBEb3dubG9hZCBidXR0b24gbmV4dCB0byB0aGUgc3Vic2NyaWJlIGJ1dHRvbiwgdGhhbmtzIHRvIHlvdXR1YmVpbm1wMyBmb3IgdGhlaXIgc2ltcGxlIGRvd25sb2FkIHNlcnZpY2UgKGh0dHA6Ly95b3V0dWJlaW5tcDMuY29tL2FwaS8pLiBCYXNlZCBvZmYgbWFnbnVzJ3MgeW91dHViZTJtcDMgY29kZS4gSnVzdCB1c2VkIHNvbWV0aGluZyBkaWZmZXJlbnQgYXMgaXQgd29udCBvcGVuIGFub3RoZXIgdGFiLgovLyBAbWF0Y2ggICAgICAgICBodHRwKjovL3d3dy55b3V0dWJlLmNvbS8qCi8vIEByZXF1aXJlICAgICAgIGh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS9qcXVlcnkubWluLmpzCi8vIEBjb3B5cmlnaHQgIDIwMTQrLCBTb3Vsd2VhdmVyCi8vID09L1VzZXJTY3JpcHQ9PQoKICAgICAgICB2YXIgbGlua1BhdGggPSdodHRwOi8veW91dHViZWlubXAzLmNvbS9mZXRjaC8/dmlkZW89JytlbmNvZGVVUklDb21wb25lbnQoZG9jdW1lbnQuVVJMKSsiJmhxPTEiOwogICAgICAgICQoICAnPGEgaWQ9InlvdXR1YmUybXAzIiBjbGFzcz0ieXQtdWl4LWJ1dHRvbiB5dC11aXgtYnV0dG9uLWRlZmF1bHQiIGhyZWY9IicrbGlua1BhdGgrJyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiA4cHg7IGhlaWdodDogMjZweDsgcGFkZGluZzogMCAyMnB4OyAvKiBiYWNrZ3JvdW5kLWNvbG9yOiAjZTYyMTE3OyAqLyI+PGltZyBzcmM9Imh0dHA6Ly95b3V0dWJlaW5tcDMuY29tL2ljb24vZG93bmxvYWQucG5nIiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlO2NvbG9yOiB3aGl0ZTsiPiA8c3BhbiBjbGFzcz0ieXQtdWl4LWJ1dHRvbi1jb250ZW50IiBzdHlsZT0ibGluZS1oZWlnaHQ6IDI1cHg7IC8qIGZvbnQtdmFyaWFudDogc21hbGwtY2FwczsgKi8gZm9udC1zaXplOiAxMnB4OyAvKiBjb2xvcjogI2ZlZmVmZTsgKi8iPk1QMyBEb3dubG9hZDwvc3Bhbj48L2E+JykuaW5zZXJ0QWZ0ZXIoICIjd2F0Y2g3LXN1YnNjcmlwdGlvbi1jb250YWluZXIiICk7ICAg"},{"name":"jQuery","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://*","https://*"],"orig_matches":["http://*/*","https://*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469589489313,"data":{}},"enabled":false,"position":11,"uuid":"207610f9-2c3d-443a-92d6-0f84df2169df","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBqUXVlcnkKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwOi8vKi8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly8qLyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vIEByZXF1aXJlICAgICAgaHR0cDovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xL2pxdWVyeS5taW4uanMKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vKgovLyBAaW5jbHVkZSAgICAgIGh0dHBzOi8vKgovLyA9PS9Vc2VyU2NyaXB0PT0KCiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgY29uc29sZS5sb2coIkknbSBydW5uaW5nIHdpdGggalF1ZXJ5ISIpOwp9KTs="},{"name":"Code with jQuery","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://developer.chrome.com/*","http://developer.chrome.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1470551550101,"data":{}},"enabled":false,"position":12,"uuid":"184e6c35-3b70-4898-ae85-483be645e422","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDb2RlIHdpdGggalF1ZXJ5Ci8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBncmFudCAgICAgICAgbm9uZQovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS9qcXVlcnkubWluLmpzCi8vIEBpbmNsdWRlICAgICAgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cDovL2RldmVsb3Blci5jaHJvbWUuY29tLyoKLy8gPT0vVXNlclNjcmlwdD09CgokKCduYXYuaW5saW5lLXNpdGUtdG9jLm5vLXBlcm1hbGluaycpLmNzcygiZGlzcGxheSIsIm5vbmUiKTsKJCgnZGl2W2l0ZW1wcm9wPSJhcnRpY2xlQm9keSJdJykuY3NzKCJtYXJnaW4tbGVmdCIsICIwcHgiKTsKCiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgY29uc29sZS5sb2coIkknbSBydW5uaW5nIHdpdGggalF1ZXJ5ISIpOwp9KTs="},{"name":"Include jQuery 2.0.3","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1470897122981,"data":{}},"enabled":false,"position":13,"uuid":"441f7983-ae81-4de5-a1f4-50a9457d1aad","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIEluY2x1ZGUgalF1ZXJ5IDIuMC4zCi8vIEBuYW1lc3BhY2UgICBpbmNsdWRlSnF1ZXJ5Ci8vIEBpbmNsdWRlICAgICAqCi8vIEB2ZXJzaW9uICAgICAwLjEKLy8gQGdyYW50ICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQKLy8gPT0vVXNlclNjcmlwdD09CgpHTV9yZWdpc3Rlck1lbnVDb21tYW5kKCfQn9C+0LTQutC70Y7Rh9C40YLRjCBqUXVlcnkgMi4wLjMnLCBpbmNsdWRlSnF1ZXJ5LCAnaicpOwoKZnVuY3Rpb24gaW5jbHVkZUpxdWVyeSgpIHsKICAgIGluY2x1ZGVTY3JpcHRPblBhZ2UoJy8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzIuMC4zL2pxdWVyeS5taW4uanMnKTsKfQoKZnVuY3Rpb24gaW5jbHVkZVNjcmlwdE9uUGFnZSh1cmwpIHsKICAgIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSwKICAgICAgICBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwKICAgICAgICBwcm90b2NvbCA9IHVuc2FmZVdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbDsKCiAgICBzY3JpcHQuc3JjPSBwcm90b2NvbCArIHVybDsKICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKfQ=="},{"name":"depositfiles_downloader","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?:\\/\\/(www\\.)?(dfiles|depositfiles)\\.(ru|com)\\/files\\/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469597478380,"data":{}},"enabled":false,"position":14,"file_url":"https://openuserjs.org/install/Black_Sun/depositfiles_downloader.user.js","uuid":"bc690782-b429-493c-b8ad-0471ad796cb5","source":""},{"name":"Mouseover Popup Image Viewer","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":[],"orig_includes":["http*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"cfg":"s{\"version\":5,\"delay\":500,\"start\":\"auto\",\"zoom\":\"context\",\"center\":false,\"cursor\":false,\"imgtab\":false,\"close\":true,\"preload\":false,\"css\":\"\",\"scales\":[],\"hosts\":\"\",\"scale\":1.5,\"xhr\":true}"},"ts":1469598730159},"enabled":false,"position":15,"file_url":"https://greasyfork.org/scripts/404-mouseover-popup-image-viewer/code/Mouseover%20Popup%20Image%20Viewer.user.js","uuid":"57c5bbb9-fe78-4286-9e00-189b82e38ec6","source":""},{"name":"Direct links out","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*://google.*","*://www.google.*","*://encrypted.google.*"],"orig_matches":["*://yandex.ru/*","*://yandex.ua/*","*://yandex.by/*","*://yandex.kz/*","*://yandex.com.tr/*","*://yandex.com/*","*://*.yandex.ru/*","*://*.yandex.ua/*","*://*.yandex.by/*","*://*.yandex.kz/*","*://*.yandex.com.tr/*","*://*.yandex.com/*","*://youtube.com/*","*://*.youtube.com/*","*://deviantart.com/*","*://*.deviantart.com/*","*://joyreactor.cc/*","*://*.joyreactor.cc/*","*://reactor.cc/*","*://*.reactor.cc/*","*://joyreactor.com/*","*://*.joyreactor.com/*","*://vk.com/*","*://*.vk.com/*","*://ok.ru/*","*://*.ok.ru/*","*://steamcommunity.com/*","*://*.steamcommunity.com/*","*://facebook.com/*","*://*.facebook.com/*","*://twitter.com/*","*://*.twitter.com/*","*://4pda.ru/*","*://*.4pda.ru/*","*://kat.cr/*","*://kickassto.co/*","*://katproxy.is/*","*://thekat.tv/*","*://*.kat.cr/*","*://*.kickassto.co/*","*://*.katproxy.is/*","*://*.thekat.tv/*","*://addons.mozilla.org/*","*://pixiv.net/*","*://*.pixiv.net/*","*://tumblr.com/*","*://*.tumblr.com/*","*://danieldefo.ru/*","*://*.danieldefo.ru/*","*://yaplakal.com/*","*://*.yaplakal.com/*","*://soundcloud.com/*","*://*.soundcloud.com/*","*://upwork.com/*","*://*.upwork.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469598925912,"data":{}},"enabled":false,"position":16,"file_url":"https://greasyfork.org/scripts/15857-direct-links-out/code/Direct%20links%20out.user.js","uuid":"cecd69e7-ccc8-47ad-bf47-2573e30f68ac","source":""},{"name":"YouTube Link Title","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["googleapis.com","vimeo.com","vine.co","liveleak.com","worldstarhiphop.com","dailymotion.com","coub.com","vid.me","streamable.com"],"orig_excludes":["http*//*.google.*/*","*//*.googleapis.com/*","*//vimeo.com/*","*//*.vimeo.com/*","*//*.worldstarhiphop.com/*","*//vine.co/*","*//*.dailymotion.com/*","*//coub.com/*","*//vid.me/*","*//*.vid.me/*","*://disqus.com/embed/*worldstarhiphop*","*//streamable.com/*","*//*.streamable.com/*"],"orig_includes":["http*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"big":"btrue","cache":"s{\"ythRF0kb9MRlg\":\"Video not found\\t4\",\"ytovpKSL5jnAA\":\"Battery powered plane gets a test flight - Elektra One - D-MELN\",\"ytObmAOJA__1k\":\"Glass engine, rendered CAD animation, combustion high speed imaging, based on a Pannonia block\",\"ytW2eILCrW53M\":\"Deutz engine 1\",\"yt2QB7XPMeLnA\":\"Deutz engine 2\",\"ytY_e7rA4fBAo\":\"Elon Musk on why Hydrogen fuel cell is dumb (2015.1.13)\",\"ytB_Whbb_hlPs\":\"Hydrogen Fuel Cell electric bike\",\"vm25279206\":\"Fuel Starvation\\t\\thttps://i.vimeocdn.com/video/166349982_295x166.jpg\",\"ytu0uPmrSRM7w\":\"Ilmor 5 Stroke Engine\",\"ytUmA_3CRHFQU\":\"Sixth Stroke - An Interview with Chanayil Cleetus Anil, NIYKADO Motors\",\"ytr1EVfr0diZY\":\"Live conversation between UN Secretary General Ban Ki-Moon & Bertrand Piccard\",\"yto_9oDFMiIhw\":\"Design Of Solar Impulse 1 to European Flights 2011\",\"ytcqOHbihYbhE\":\"Intelligence in Wikipedia\",\"ytVM3OPNwGOFg\":\"Resisting Internet Censorship: Katherine Maher of Access at SHARE Beirut\",\"yt7VApsZ4Ltac\":\"Success with Code Avengers\",\"ytTxPpH8LJfdg\":\"5.ua :: Янукович назвав Тимошенко \\\"коровою на льду\\\"\",\"yt6OFL_6UQgog\":\"Янукович невиновен Ген прокурор Украины Yanukovych\",\"ytWimc2kyuYjE\":\"Что такое аккаунт? Как зарегистрировать (создать) аккаунт.\",\"yt5RScapkojhI\":\"Безопасная IP-телефония Asterisk: закрытие уязвимостей\",\"ytwX6NwBa1csY\":\"Using SDXC Memory Cards is Easy\",\"ytvQqeAk__vvE\":\"CodeOverview for GVim\",\"ytA3PDXmYoF5U\":\"GoPro HERO3: Almost as Epic as the HERO3+\",\"cbz12n97i\":\"Hollaback Chicken\\t\\thttps://coubsecure-a.akamaihd.net/get/bucket:12.21/p/coub/simple/cw_image/0be3b055b27/f3f464e3cd755b5d1da63/big_1409579755_1381491418_00032.jpg\",\"vnhLQIB3Ka0Vl\":\"Flat Iron 💦💦💦\\t\\thttps://v.cdn.vine.co/r/thumbs/E77952692D1035360409206550528_1ca211dd7ba.4.7.16276969947760525878.mp4_82b1VK7Y_7lPcHEYtuwtsbe2NC9B0VoL5jX6JHTWAwuk73rqQU46nsNbxT7ChbbT.jpg?versionId=tAgi.miyDNaQlHQQx7Ddr2zpaHk3t533\",\"ytNWHfY_lvKIQ\":\"Learning from StackOverflow.com\",\"ytlIFE7h3m40U\":\"The Art of the Bodge: How I Made The Emoji Keyboard\",\"ytJv0UQR-5ZLs\":\"A Common Lisp FullScreen Window Manager (CLFSWM) presentation\",\"ytNlD2L-AUQ_Q\":\"Edit Replacements\",\"ytaRrPZ73ZEYA\":\"Personal Variable List\",\"ytKKvHVR7gLUY\":\"Install AHK Studio and download a plugin\",\"ytYCI4T09L7OI\":\"Getting Started\",\"ytMDcVR5enjP8\":\"MACHO MAN Trailer 2015 (HD) - Christian Ulmen, Nora Tschirner & Axel Stein\",\"ytoaF-HdgZVU8\":\"A Royal Night Out - Official UK Trailer - In Cinemas Now!\",\"ytIP0nMv_NI1s\":\"Google Chrome Extensions: Developing and Debugging\",\"ytNim4_f5QUxA\":\"Vim Training Class 1 - Basic motions and commands\",\"yt2pqipq-UEwQ\":\"Vim Training Class 2 - Customizing and Extending Vim\",\"ytLftssGgRl5M\":\"Re:Flex Motion Morph Tutorial\",\"ytY0m10OGcw14\":\"Sam Chao's \\\"All Damn Day\\\" Video\",\"yt9TolpbhGftQ\":\"Slick Willies -June Monthly 2016\",\"ytIK0mI8y3ADk\":\"Drawing Boards x Level x Smash Skates @ Flo\",\"yt1AnHBoAh1W4\":\"Boomtown Ramp 2014\",\"ytxog5rhN5e8w\":\"Vans Shop Riot 2016 UK Skateboard Competition - Slick Willies\",\"ytTavRhEulwQk\":\"Джедай верстки #1. Часть 1: Адаптивная HTML верстка на примере сайта автосервиса\",\"yt-ymjT8C-tHc\":\"Configuring and deploying to IIS ASP.NET\",\"ytjobvVaekOKA\":\"The Big Bang Theory: \\\"Get back on the whores\\\"\",\"yteRZ4pO0gVWw\":\"DOM Mutation Observers & The Mutation Summary Library\",\"ytYpYqOneduiw\":\"Advisor Assignments and Placing and Removing Holds\",\"ytOUcWtCpPjew\":\"CalCentral for Advising: Queries\",\"ytxm6Lg0H2-AQ\":\"Where Did MyBerkeley App Go: Webinar 3/21/16\",\"ytiTy8gXRNbwc\":\"The Student Enrollment Experience\",\"ytamONbknrGFI\":\"The Schedule of Classes for Advisors\",\"ytDhBGH4spsiI\":\"Overview of CalCentral for Advising: The Student Experience\",\"vm95045348\":\"Introduction to the Babun Project\\t\\thttps://i.vimeocdn.com/video/474915578_295x166.jpg\",\"ytuEdRLlqdgA4\":\"iPad Art - Morgan Freeman Finger Painting\",\"ytweF-_dLYrzw\":\"Video not found\\t4\",\"ytHi2V1x1AkD8\":\"Tom Preston-Werner at Mail.ru Office 2010\",\"ytLn-B_fs9QMY\":\"Founders & CEOs of Eventbrite, GitHub, Mozilla, & ALOM on Startup Culture\",\"ytk2vJNNAQZlg\":\"Jive and Fox Business Host GitHub CEO Tom Preston-Werner\",\"yt7DoB0SCUtOk\":\"Tom Preston-Werner interviewed at OSCON 2013\",\"vm17118008\":\"Tom Preston-Werner - Mastering Git Basics\\t\\thttps://i.vimeocdn.com/video/105875001_640.jpg\",\"vm39016099\":\"Tom Preston-Werner - Optimizing for Happiness\\t\\thttps://i.vimeocdn.com/video/268999630_295x166.jpg\",\"vm35640883\":\"NLC 11: Closing keynote - Tom Preston-Werner (GitHub)\\t\\thttps://i.vimeocdn.com/video/243850374_295x166.jpg\",\"ytQ5ieU-yA_rU\":\"OptimizedHTML 1.0 - лучшие практики скоростной оптимизированной верстки сайтов\",\"ytp-Sdyj9qnmY\":\"Как увеличить скорость загрузки сайта (оптимизация фронтенда для Google PageSpeed)\",\"ytH4cG4tbc-xQ\":\"Sass для самых маленьких - подробное руководство\",\"ytZJZfIw3P8No\":\"ECMAScript 6 / ES6 New Features - Tutorial 1 - Let\",\"ytxZbMVj9XSUo\":\"Emacs running in Neovim\",\"ytK1XEVClxa_c\":\"CANT FOCUS? CHECK THIS OUT! | BY ANIKA MORJARIA\",\"ytUmb59mMvCxA\":\"Vim Multicursors\",\"ytNBdKplKl_3Q\":\"Gulp 3: Потоки Vinyl-FS\",\"yt_BFWG82mMkw\":\"Gulp 4: Начальная сборка стилей\",\"ytuPk6lQoTThE\":\"Gulp 1: Что такое Gulp? Сравнение с Grunt и Webpack\",\"ytxptUdO3GuG8\":\"Gulp 2: Установка и запуск задач\",\"ytoiMJNIG-yvg\":\"Gulp 7: Автоперезагрузка браузера: browser-sync\",\"ytjocvHauHcA4\":\"Gulp 5: Инкрементальная сборка, watch\",\"ytotkXzef2wQY\":\"Gulp 8: Обработка ошибок\",\"ytuYZPNrT-e-8\":\"Gulp 6: Инкрементальность и производительность\",\"ytIjg9I1CY7Ok\":\"Gulp 9: Создание плагинов при помощи through2\",\"ytpjdrg6n5puU\":\"Gulp 10: Более сложный поток: eslint, gulp-if, stream-combiner2\",\"yt5aJB4vJlHBs\":\"Gulp 11: Понимаем ли мы потоки Node.JS?\",\"ytVqYAitDKbpo\":\"Gulp 13: Стили + ресурсы, спрайты, продакшн\",\"ytQc6go3cNuRk\":\"Gulp 12: Организация gulpfile'а\",\"ytohWOWqskHWU\":\"Gulp 14: Интеграция Gulp и Webpack\",\"ytriIVNjPOyDo\":\"How to Pronounce Gulp\",\"ytE9FxNzv1Tr8\":\"Making HTTP realtime with HTTP 2.0 - Realtime Conf 2013\",\"ytU45e-zq4bTs\":\"[CSSconf.eu 2013] Peter Gasston - Future CSS in Web Components\",\"ytGpwpsbHM4gk\":\"Vim Align Plugin\",\"ytf1BEjGet8M8\":\"Morphine - Buena | 2 Meter Sessies | 25/5/1994\",\"ytYhqsjUUHj6g\":\"Vim as a Python IDE - Martin Brochhaus\",\"yt67OZNp9Z0CQ\":\"VIM Python-mode\",\"ytg5GamptmWeA\":\"Going cross-platform: how htop was made portable\",\"yt1-_YsRJ6Grs\":\"Эффективная работа с запросами в Microsoft SQL Server Management Studio\",\"ytl6x-tIGrfEs\":\"Маршрутизация IP-трафика\",\"ytPbaG8I8OkAs\":\"Новые возможности Windows Server 2016\",\"ytoJ3mK1m41TM\":\"Параллельные и многопоточные задачи программирования\",\"ytU5MAUWV6DVo\":\"Компьютерные сети\",\"yt1Yc-u5IyufI\":\"Конфигурирование, сборка и установка ядра Linux\",\"ytedNA4BuDWxY\":\"Маскировка данных в SQL Server 2016\",\"ytTLVI2MzSQAc\":\"Файловая система proc1 при написании драйвера в Linux\",\"yt2zemgtuurUM\":\"Диагностика и восстановление загрузки Windows\",\"ytmqjvUH5XN9M\":\"Противодействие хакерскому взлому: устройство логов и способы подмены записей журналов\",\"ytbSBmqgVGhn8\":\"Новое в SharePoint 2013 для администраторов\",\"yt8S1snIWlV6I\":\"Центр «Специалист». Wireshark - сниффер №1\",\"ytsTOwJOHAfgQ\":\"Курсы FreeBSD\",\"ytPpLn26xBcn4\":\"Курсы UNIX (Linux/FreeBSD) в Центре \\\"Специалист\\\"\",\"yt8XLRObfWwqQ\":\"Добро пожаловать в Центр \\\"Специалист\\\"\",\"ytOHevIeUyA5g\":\"Анализ журналов с помощью LogParser\",\"ytSQRLwq_YCLI\":\"Информационная безопасность и антивирусная защита Kaspersky Lab (часть 1))\",\"yt5Y67Q7um1WU\":\"Корпоративный WebVPN на основе прокси-сервера Squid\",\"ytC0MOFGn4RcI\":\"Вебинар:\\\"Об ip-адресации по-простому\\\"\",\"vm25764692\":\"Threesome.vim work-in-progress demo\\t\\thttps://i.vimeocdn.com/video/169838259_295x166.jpg\"}","country":"s","darken":"btrue","embed_mode":"splayer","previews":"btrue","reverse_buttons":"bfalse","rewrite":"btrue","urls_only":"bfalse"},"ts":1473223456748},"enabled":true,"position":17,"file_url":"https://greasyfork.org/scripts/413-youtube-link-title/code/YouTube%20Link%20Title.user.js","uuid":"baf1f229-9311-46a5-84b2-b4a4cf6fa415","source":""},{"name":"YouTube Auto Buffer & Auto HD","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":true,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://*.youtube.com/*","http://youtube.com/*","https://*.youtube.com/*","https://youtube.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469607858095,"data":{}},"enabled":false,"position":18,"file_url":"https://greasyfork.org/scripts/494-youtube-auto-buffer-auto-hd/code/YouTube%20Auto%20Buffer%20%20Auto%20HD.user.js","uuid":"93712d58-ae1e-4d0b-b11b-9281cc958317","source":""},{"name":"Google site: Tool (Site results / Exclude sites)","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://www.google.*/*","http*://encrypted.google.*/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469599618516,"data":{}},"enabled":true,"position":19,"file_url":"https://greasyfork.org/scripts/1679-google-site-tool-site-results-exclude-sites/code/Google%20site:%20Tool%20(Site%20results%20%20Exclude%20sites).user.js","uuid":"e20e6854-8856-420d-ab34-a4d922f53ba0","source":""},{"name":"Google Search Extra Buttons","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://www.google.*/search*","https://www.google.*/search*","https://www.google.*/*","https://encrypted.google.*/search*","https://encrypted.google.*/*","https://spmbt.github.io/googleSearchExtraButtons/saveYourLocalStorage.html"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469600574380,"data":{}},"enabled":false,"position":20,"file_url":"https://greasyfork.org/scripts/7543-google-search-extra-buttons/code/Google%20Search%20Extra%20Buttons.user.js","uuid":"7eeb936f-0f1e-4bae-b1d6-d7fc60085acb","source":""},{"name":"Github Image Viewer","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://github.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469597358125,"data":{}},"enabled":true,"position":21,"file_url":"https://github.com/jerone/UserScripts/raw/master/Github_Image_Viewer/Github_Image_Viewer.user.js","uuid":"02502075-cadf-4364-95f7-6b72da62bf20","source":""},{"name":"GBookDown - Download Google Books","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://books.google.*/books*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469607164379,"data":{}},"enabled":false,"position":22,"file_url":"https://greasyfork.org/scripts/17113-gbookdown-download-google-books/code/GBookDown%20-%20Download%20Google%20Books.user.js","uuid":"e821fb56-7f28-4fc1-b456-03ec242ef654","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHQm9va0Rvd24gLSBEb3dubG9hZCBHb29nbGUgQm9va3MKLy8gQGRlc2NyaXB0aW9uICBTYXZlcyBhbGwgYXZhaWxhYmxlIFByZXZpZXcgcGFnZXMgZnJvbSBhIEdvb2dsZSBCb29rIGFzIFBOR3MKLy8gQGF1dGhvciAgICAgICBuaWtpc2J5Ci8vIEBuYW1lc3BhY2UgICAgbmlraXNieQovLyBAaW5jbHVkZSAgICAgIGh0dHBzOi8vYm9va3MuZ29vZ2xlLiovYm9va3MqCi8vIEB2ZXJzaW9uICAgICAgMS4xCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTIuMC9qcXVlcnkubWluLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanN6aXAvMi41LjAvanN6aXAubWluLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvRmlsZVNhdmVyLmpzLzIwMTQtMTEtMjkvRmlsZVNhdmVyLm1pbi5qcwovLyBAZ3JhbnQgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vID09L1VzZXJTY3JpcHQ9PQoKdGhpcy4kID0gdGhpcy5qUXVlcnkgPSBqUXVlcnkubm9Db25mbGljdCh0cnVlKTsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGNzcyA9IFsKICAgICcjc2F2ZVBORyB7JywKICAgICcgICAgcG9zaXRpb246IGZpeGVkOycsCiAgICAnICAgIHBhZGRpbmc6IDdweDsnLAogICAgJyAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjhFRUIxOycsCiAgICAnICAgIGJvcmRlcjogMnB4IHNvbGlkICMzMzM7JywKICAgICcgICAgYm9yZGVyLXJhZGl1czogNnB4OycsCiAgICAnICAgIHotaW5kZXg6IDk5OTk7JywKICAgICcgICAgZm9udC1zaXplOiAxOHB4OycsCiAgICAnICAgIHJpZ2h0OiAzMHB4OycsCiAgICAnICAgIGJvdHRvbTogMjBweDsnLAogICAgJyAgICBjb2xvcjogIzAwMDsnLCAgICAKICAgICcgICAgd2lkdGg6IDY1MHB4OycsICAgICAgCiAgICAnICAgIHRleHQtYWxpZ246IGNlbnRlcjsnLCAgICAgICAKICAgICcgICAgYm94LXNoYWRvdzogMCAxcHggNHB4IHJnYmEoMCwgMCwgMCwgMC41KSwgMCAwIDE1cHggcmdiYSgwLCAwLCAwLCAwLjMpOycsCiAgICAnfScsCiAgICAnI3NhdmVQTkcgYnV0dG9uIHsnLCAgCiAgICAnICAgIGZvbnQtc2l6ZTogMThweDsnLCAKICAgICcgICAgd2lkdGg6IDEwMHB4OycsCiAgICAnICAgIGN1cnNvcjogcG9pbnRlcjsnLCAgICAKICAgICd9JywgICAgCiAgICAnI3NhdmVQTkcgaW5wdXQgeycsICAgIAogICAgJyAgICB3aWR0aDogNjBweDsnLCAgCiAgICAnICAgIGZvbnQtc2l6ZTogMThweDsnLCAgICAKICAgICcgICAgdGV4dC1hbGlnbjogY2VudGVyOycsICAgICAgICAKICAgICd9JyAgICAgCiAgXS5qb2luKCdcbicpOwogIGlmICh0eXBlb2YgR01fYWRkU3R5bGUgIT0gJ3VuZGVmaW5lZCcpIHsKICAgIEdNX2FkZFN0eWxlKGNzcyk7CiAgfSBlbHNlIGlmICh0eXBlb2YgUFJPX2FkZFN0eWxlICE9ICd1bmRlZmluZWQnKSB7CiAgICBQUk9fYWRkU3R5bGUoY3NzKTsKICB9IGVsc2UgaWYgKHR5cGVvZiBhZGRTdHlsZSAhPSAndW5kZWZpbmVkJykgewogICAgYWRkU3R5bGUoY3NzKTsKICB9IGVsc2UgewogICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgbm9kZS50eXBlID0gJ3RleHQvY3NzJzsKICAgIG5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7CiAgICB2YXIgaGVhZHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpOwogICAgaWYgKGhlYWRzLmxlbmd0aCA+IDApIHsKICAgICAgaGVhZHNbMF0uYXBwZW5kQ2hpbGQobm9kZSk7CiAgICB9IGVsc2UgewogICAgICAvLyBubyBoZWFkIHlldCwgc3RpY2sgaXQgd2hlcmVldmVyCiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTsKICAgIH0KICB9Cn0pICgpOwoKdmFyIGh0bWwgPSAnPGRpdiBpZD0ic2F2ZVBORyI+JyArIAogICAgJzxzcGFuPlRoZXJlIGFyZSBtYXggPC9zcGFuPiAnICsgCiAgICAnPGlucHV0IHR5cGU9InRleHQiIGlkPSJ0b3RhbCIgdmFsdWU9Ii0tLSIgcmVhZG9ubHk+ICcgKyAKICAgICc8c3Bhbj5wYWdlcyBhdmFpbGFibGUuIEkgYWxyZWFkeSBoYXZlIDwvc3Bhbj4gJyArIAogICAgJzxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iY291bnQiIHZhbHVlPSIwIj4gJyArIAogICAgJzxzcGFuPi48L3NwYW4+ICcgKwogICAgJzxidXR0b24+U3RhcnQ8L2J1dHRvbj4nICsKICAgICc8L2Rpdj4nOwoKJCgnYm9keScpLnByZXBlbmQoaHRtbCk7CgokKCcjY291bnQnKS5zZWxlY3QoKTsKCnZhciB0aXRsZSwgaWQsIHppcGZpbGUsIHppcG5hbWU7CnZhciB6aXBmbGFnID0gZmFsc2U7CnZhciBuZXh0ID0gdHJ1ZTsKdmFyIHppcCA9IG5ldyBKU1ppcCgpOwp2YXIgcGlkcyA9IFtdOwoKJCgnI3NhdmVQTkcgYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKXsKICBkb1RoZU1hZ2ljKCk7Cn0pCgokKCIjY291bnQiKS5rZXl1cChmdW5jdGlvbihldmVudCl7CiAgICBpZihldmVudC5rZXlDb2RlID09IDEzKXsKICAgICAgICAkKCIjc2F2ZVBORyBidXR0b24iKS5jbGljaygpOwogICAgfQp9KTsKCmZ1bmN0aW9uIGFkZElNRyh1cmwsIG5hbWUsIGNvdW50KSB7CiAgdmFyIGZpbGVuYW1lID0gbmFtZSArICcucG5nJzsKICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICBtZXRob2Q6ICdHRVQnLAogICAgc3luY2hyb25vdXM6IHRydWUsCiAgICB1cmw6IHVybCwKICAgIG92ZXJyaWRlTWltZVR5cGU6ICdpbWFnZS9wbmc7IGNoYXJzZXQ9eC11c2VyLWRlZmluZWQnLAogICAgb25sb2FkOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgJCgnI3NhdmVQTkcgYnV0dG9uJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKS50ZXh0KCdXb3JraW5n4oCmJyk7CiAgICAgICQoJyNjb3VudCcpLnZhbChjb3VudCk7CiAgICAgICQoJyNjb3VudCcpLmNzcygnZm9udC13ZWlnaHQnLCAnbm9ybWFsJykuY3NzKCd0ZXh0LWRlY29yYXRpb24nLCAnbm9uZScpOwogICAgICB6aXAuZmlsZShmaWxlbmFtZSwgcmVzcG9uc2UucmVzcG9uc2VUZXh0LCB7CiAgICAgICAgYmluYXJ5OiB0cnVlCiAgICAgIH0pOwogICAgfQogIH0pOwp9CgpmdW5jdGlvbiBzYXZlWmlwKGNvdW50LCBudW1iZXIpIHsKICB6aXBuYW1lID0gdGl0bGUgKyAnXycgKyBpZCArICdfJyArIAogICAgcGFkKGNvdW50LCBudW1iZXIudG9TdHJpbmcoKS5sZW5ndGgpICsgCiAgICAnXycgKyBudW1iZXIgKyAnLnppcCc7CiAgemlwZmlsZSA9IHppcC5nZW5lcmF0ZSh7CiAgICB0eXBlOiAnYmxvYicKICB9KTsKICAkKCcjc2F2ZVBORyBidXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKS50ZXh0KCdTdGFydCcpOwogIHNhdmVBcyh6aXBmaWxlLCB6aXBuYW1lKTsKfQoKZnVuY3Rpb24gcGFkKG51bSwgc2l6ZSkgewogICAgdmFyIHMgPSAiMDAwMDAwMDAwIiArIG51bTsKICAgIHJldHVybiBzLnN1YnN0cihzLmxlbmd0aC1zaXplKTsKfQoKZnVuY3Rpb24gZG9UaGVNYWdpYygpIHsKICAkKCcjc2F2ZVBORyBidXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpOwogIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgdmFyIGRvbWFpbiA9IGhyZWYuc3BsaXQoJy8nKSBbMl07CiAgCiAgaWQgPSBocmVmLm1hdGNoKC9pZD0oW14mXSspLykgWzFdOwogIHRpdGxlID0gJCgndGl0bGUnKS50ZXh0KCkuc3BsaXQoJyAtICcpWzBdLnJlcGxhY2UoL1xzKy9nLCdfJyk7CiAgCiAgdmFyIHBpZCA9ICdQUDEnOwogIHZhciBjb3VudCA9IHBhcnNlSW50KCQoJyNjb3VudCcpLnZhbCgpKTsKICAKICB2YXIgdXJsID0gJ2h0dHBzOi8vJyArIGRvbWFpbiArICcvYm9va3M/aWQ9JyArIGlkICsgJyZscGc9JyArIHBpZCArICcmcGc9JyArIHBpZCArICcmanNjbWQ9Y2xpY2szJzsKICAKICAkLmFqYXgoewogICAgZGF0YVR5cGU6ICdqc29uJywKICAgIGFzeW5jOiBmYWxzZSwKICAgIHVybDogdXJsLAogIH0pLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHsKICAgIHBpZHMgPSAkLm1hcChkYXRhLnBhZ2UsIGZ1bmN0aW9uICh2YWwsIGkpIHsKICAgICAgaWYgKGkgPiAzKSB7CiAgICAgICAgcmV0dXJuIHZhbC5waWQ7CiAgICAgIH0KICAgIH0pOwogIH0pOwogIAogIHZhciBudW1iZXIgPSBwaWRzLmxlbmd0aDsKICAkKCcjdG90YWwnKS52YWwobnVtYmVyKTsKICAKICBpZiAoY291bnQgPj0gbnVtYmVyKSB7CiAgICBhbGVydCgnV3JvbmcgbnVtYmVyIG9mIHBhZ2VzLiBUaGVyZSBhcmUgb25seSAnICsgbnVtYmVyICsgJyBhdmFpbGFibGUuJyk7CiAgICAkKCcjc2F2ZVBORyBidXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTsKICB9IGVsc2UgewogICAgdmFyIGkgPSBjb3VudDsKCiAgICB2YXIgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CgogICAgICBpZiAoaSA9PSBudW1iZXIpIHsKICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTsKICAgICAgICBhbGVydCgnRG93bmxvYWRlZCBldmVyeSBhdmFpbGFibGUgcGFnZSBvdXQgb2YgJysgbnVtYmVyICsgJyB0b3RhbC4gU2F2aW5n4oCmJyk7CiAgICAgICAgc2F2ZVppcChpLCBudW1iZXIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSAgICAgCgogICAgICB2YXIgdXJsID0gJ2h0dHBzOi8vJyArIGRvbWFpbiArICcvYm9va3M/aWQ9JyArIGlkICsgJyZscGc9JyArIHBpZHNbaV0gKyAnJnBnPScgKyBwaWRzW2ldICsgJyZqc2NtZD1jbGljazMnOwoKICAgICAgJC5hamF4KHsKICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAogICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICB1cmw6IHVybCwKICAgICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGlmIChkYXRhLnBhZ2VbMF0uaGFzT3duUHJvcGVydHkoJ3NyYycpIHx8IGRhdGEucGFnZVswXS5mbGFncyA9PSA4KSB7CiAgICAgICAgICB2YXIgdXJsID0gZGF0YS5wYWdlWzBdLnNyYyArICcmdz0xNjAwJzsKICAgICAgICAgIHZhciBuYW1lID0gcGFkKChpKzEpLCBudW1iZXIudG9TdHJpbmcoKS5sZW5ndGgpICsgJ18nICsgcGlkc1tpXTsKICAgICAgICAgIAogICAgICAgICAgaWYgKGRhdGEucGFnZVswXS5mbGFncyA9PSA4KSB7CiAgICAgICAgICAgICQoJyNjb3VudCcpLnZhbChpICsgMSk7CiAgICAgICAgICAgICQoJyNjb3VudCcpLmNzcygnZm9udC13ZWlnaHQnLCAnYm9sZCcpLmNzcygndGV4dC1kZWNvcmF0aW9uJywgJ2xpbmUtdGhyb3VnaCcpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWRkSU1HKHVybCwgbmFtZSwgKGkgKyAxKSk7ICAgICAgICAKICAgICAgICAgIH0KICAgICAgICAgIGkrKzsKICAgICAgICAgIAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTsKICAgICAgICAgIGFsZXJ0KCdDYW5cJ3QgZG93bmxvYWQgbW9yZS5cbicgKyAKICAgICAgICAgICAgICAgICdTYXZpbmcgJyArIGkgKyAnIG91dCBvZiAnICsgbnVtYmVyICsgJyBwYWdlc+KAplxuJyArIAogICAgICAgICAgICAgICAgJ0NoYW5nZSB5b3VyIElQIGFuZCBjb250aW51ZSEnKTsKICAgICAgICAgIHNhdmVaaXAoaSwgbnVtYmVyKTsKICAgICAgICB9CiAgICAgIH0pOyAKICAgIH0sIDQwMCk7ICAgIAogIH0KfQ=="},{"name":"Github color preview","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://*.github.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469649440849,"data":{}},"enabled":true,"position":23,"file_url":"https://greasyfork.org/scripts/4034-github-color-preview/code/Github%20color%20preview.user.js","uuid":"e1e327b9-7b6b-45ac-97d1-bf870b13481c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRodWIgY29sb3IgcHJldmlldwovLyBAYXV0aG9yICAgICAgIEFmemFsIE5hamFtCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL2FmemFsbi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMS4wCi8vIEBkZXNjcmlwdGlvbiAgQWRkcyBjb2xvdXIgdG8gZ2l0aHViIGd1dHRlciBpZiB0aGUgbGluZSBjb250YWlucyBhIGhleCBjb2xvciBjb2RlCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly8qLmdpdGh1Yi5jb20vKgovLyBAY29weXJpZ2h0ICAgIDIwMTQrLCBBZnphbCBOYWphbQovLyA9PS9Vc2VyU2NyaXB0PT0KCnJvd3MgPSAkKCcuZmlsZSA+IC5ibG9iLXdyYXBwZXIgPiB0YWJsZSA+IHRib2R5ID4gdHInKTsKR01fYWRkU3R5bGUgKCAiLmJsb2ItbGluZS1udW0geyB3aWR0aDo2JSAhaW1wb3J0YW50IH0iICk7CnJvd3MuZWFjaChmdW5jdGlvbiAoaW5kZXgpIHsKICAgIGxpbmVOdW0gPSAkKHRoaXMpLmZpbmQoJy5ibG9iLWxpbmUtbnVtJyk7CiAgICBsaW5lVGV4dCA9ICQodGhpcykuZmluZCgnLmJsb2ItbGluZS1jb2RlJykudGV4dCgpOwogICAgdmFyIHBhdHQgPSAvIyhbMC05QS1GXXsyfSk/KFswLTlBLUZdezJ9KShbMC05QS1GXXsyfSkoWzAtOUEtRl17Mn0pL2k7CiAgICB2YXIgY29sb3JzID0gcGF0dC5leGVjKGxpbmVUZXh0KTsKICAgIGlmIChjb2xvcnMgIT0gbnVsbCkgewovLyAgICAgICAgR01fbG9nKGNvbG9ycyk7CiAgICAgICAgaWYgKGNvbG9yc1sxXSkgewogICAgICAgICAgdmFyIG9wYWNpdHkgPSBwYXJzZUludChjb2xvcnNbMV0sIDE2KS8yNTU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIG9wYWNpdHkgPSAxOwogICAgICAgIH0KICAgICAgICB2YXIgciA9IHBhcnNlSW50KGNvbG9yc1syXSwgMTYpOwogICAgICAgIHZhciBnID0gcGFyc2VJbnQoY29sb3JzWzNdLCAxNik7CiAgICAgICAgdmFyIGIgPSBwYXJzZUludChjb2xvcnNbNF0sIDE2KTsKICAgICAgICB2YXIgY29sb3JkaXYgPSAiPGRpdiBzdHlsZT1cImZsb2F0OmxlZnQ7IGRpc3BsYXk6aW5saW5lOyBiYWNrZ3JvdW5kOiByZ2IoIiArIHIgKyAiLCIgKyBnICsgIiwiICsgYiArICIpOyBvcGFjaXR5OiAiICsgb3BhY2l0eSArICI7IGhlaWdodDogMTRweDsgd2lkdGg6IDhweFwiPjwvZGl2PiI7CiAgICAgICAgbGluZU51bS5hcHBlbmQoY29sb3JkaXYpOwogICAgfQp9KTsK"},{"name":"GitHub Collapse Markdown","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://github.com/*","https://gist.github.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"ghcm-collapsed":"bfalse"},"ts":1469696391765},"enabled":false,"position":24,"file_url":"https://greasyfork.org/scripts/20974-github-collapse-markdown/code/GitHub%20Collapse%20Markdown.user.js","uuid":"08b4c967-e942-4631-b4a2-0acf540fda86","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIgQ29sbGFwc2UgTWFya2Rvd24KLy8gQHZlcnNpb24gICAgICAxLjAuMQovLyBAZGVzY3JpcHRpb24gIEEgdXNlcnNjcmlwdCB0aGF0IGNvbGxhcHNlcyBtYXJrZG93biBoZWFkZXJzCi8vIEBsaWNlbnNlICAgICAgaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzQuMC8KLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vTW90dGllCi8vIEBpbmNsdWRlICAgICAgaHR0cHM6Ly9naXRodWIuY29tLyoKLy8gQGluY2x1ZGUgICAgICBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8qCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtaWRsZQovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICAgR01fZ2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQKLy8gQGF1dGhvciAgICAgICBSb2IgR2Fycmlzb24KLy8gPT0vVXNlclNjcmlwdD09Ci8qIGdsb2JhbCBHTV9hZGRTdHlsZSwgR01fZ2V0VmFsdWUsIEdNX3NldFZhbHVlLCBHTV9yZWdpc3Rlck1lbnVDb21tYW5kICovCi8qIGpzaGludCBlc25leHQ6dHJ1ZSwgdW51c2VkOnRydWUgKi8KKCgpID0+IHsKICAidXNlIHN0cmljdCI7CgogIGxldCBzdGFydENvbGxhcHNlZCA9IEdNX2dldFZhbHVlKCJnaGNtLWNvbGxhcHNlZCIsIGZhbHNlKSwKICAgIC8vIHBhbGV0dGUgZ2VuZXJhdGVkIGJ5IGh0dHA6Ly90b29scy5tZWRpYWxhYi5zY2llbmNlcy1wby5mci9pd2FudGh1ZS8gKGNvbG9yYmxpbmQgZnJpZW5kbHksIHNvZnQpCiAgICBkZWZhdWx0Q29sb3JzID0gWyIjNjc3OGQwIiwgIiNhYzljM2QiLCAiI2I5NGE3MyIsICIjNTZhZTZjIiwgIiM5NzUwYTEiLCAiI2JhNTQzZCJdLAogICAgY29sb3JzID0gR01fZ2V0VmFsdWUoImdoY20tY29sb3JzIiwgZGVmYXVsdENvbG9ycyksCgogICAgaGVhZGVycyA9ICJIMSBIMiBIMyBINCBINSBINiIuc3BsaXQoIiAiKSwKICAgIC8vIG1hcmtkb3duIHdyYXBwZXIgY2xhc3MgbmFtZQogICAgbWFya2Rvd24gPSAibWFya2Rvd24tYm9keSIsCiAgICBjb2xsYXBzZWQgPSAiZ2hjbS1jb2xsYXBzZWQiLAoKICAgIGFycm93Q29sb3JzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKCiAgR01fYWRkU3R5bGUoYAogICAgLiR7bWFya2Rvd259IGgxLCAuJHttYXJrZG93bn0gaDIsIC4ke21hcmtkb3dufSBoMywgLiR7bWFya2Rvd259IGg0LAogICAgLiR7bWFya2Rvd259IGg1LCAuJHttYXJrZG93bn0gaDYgewogICAgICBwb3NpdGlvbjpyZWxhdGl2ZTsKICAgICAgcGFkZGluZy1yaWdodDouOGVtOwogICAgICBjdXJzb3I6cG9pbnRlcjsKICAgIH0KICAgIC4ke21hcmtkb3dufSBoMTphZnRlciwgLiR7bWFya2Rvd259IGgyOmFmdGVyLCAuJHttYXJrZG93bn0gaDM6YWZ0ZXIsCiAgICAuJHttYXJrZG93bn0gaDQ6YWZ0ZXIsIC4ke21hcmtkb3dufSBoNTphZnRlciwgLiR7bWFya2Rvd259IGg2OmFmdGVyIHsKICAgICAgZGlzcGxheTppbmxpbmUtYmxvY2s7CiAgICAgIHBvc2l0aW9uOmFic29sdXRlOwogICAgICByaWdodDowOwogICAgICB0b3A6Y2FsYyg1MCUgLSAuNWVtKTsKICAgICAgZm9udC1zaXplOi44ZW07CiAgICAgIGNvbnRlbnQ6Ilx1MjViYyI7CiAgICB9CiAgICAuJHttYXJrZG93bn0gLiR7Y29sbGFwc2VkfTphZnRlciB7CiAgICAgIGNvbnRlbnQ6Ilx1MjVDNCI7CiAgICB9CiAgICAvKiBjbGlja2luZyBvbiBoZWFkZXIgbGluayB3b24ndCBwYXNzIHN2ZyBhcyB0aGUgZXZlbnQudGFyZ2V0ICovCiAgICAub2N0aWNvbi1saW5rIHsKICAgICAgcG9pbnRlci1ldmVudHM6bm9uZTsKICAgIH0KICAgIC5naGNtLWhpZGRlbiB7CiAgICAgIGRpc3BsYXk6bm9uZSAhaW1wb3J0YW50OwogICAgfQogIGApOwoKICBmdW5jdGlvbiBhZGRDb2xvcnMoKSB7CiAgICBhcnJvd0NvbG9ycy50ZXh0Q29udGVudCA9IGAKICAgICAgLiR7bWFya2Rvd259IGgxOmFmdGVyIHsgY29sb3I6JHtjb2xvcnNbMF19IH0KICAgICAgLiR7bWFya2Rvd259IGgyOmFmdGVyIHsgY29sb3I6JHtjb2xvcnNbMV19IH0KICAgICAgLiR7bWFya2Rvd259IGgzOmFmdGVyIHsgY29sb3I6JHtjb2xvcnNbMl19IH0KICAgICAgLiR7bWFya2Rvd259IGg0OmFmdGVyIHsgY29sb3I6JHtjb2xvcnNbM119IH0KICAgICAgLiR7bWFya2Rvd259IGg1OmFmdGVyIHsgY29sb3I6JHtjb2xvcnNbNF19IH0KICAgICAgLiR7bWFya2Rvd259IGg2OmFmdGVyIHsgY29sb3I6JHtjb2xvcnNbNV19IH0KICAgIGA7CiAgfQoKICBmdW5jdGlvbiB0b2dnbGUoZWwsIHNoaWZ0ZWQpIHsKICAgIGlmIChlbCkgewogICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKGNvbGxhcHNlZCk7CiAgICAgIGxldCBlbHMsCiAgICAgICAgbmFtZSA9IGVsLm5vZGVOYW1lIHx8ICIiLAogICAgICAgIGxldmVsID0gcGFyc2VJbnQobmFtZS5yZXBsYWNlKC9bXlxkXS8sICIiKSwgMTApLAogICAgICAgIGlzQ29sbGFwc2VkID0gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNvbGxhcHNlZCk7CiAgICAgIGlmIChzaGlmdGVkKSB7CiAgICAgICAgLy8gY29sbGFwc2UgYWxsIHNhbWUgbGV2ZWwgYW5jaG9ycwogICAgICAgIGVscyA9ICQkKGAuJHttYXJrZG93bn0gJHtuYW1lfWApOwogICAgICAgIGZvciAoZWwgb2YgZWxzKSB7CiAgICAgICAgICBuZXh0SGVhZGVyKGVsLCBsZXZlbCwgaXNDb2xsYXBzZWQpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBuZXh0SGVhZGVyKGVsLCBsZXZlbCwgaXNDb2xsYXBzZWQpOwogICAgICB9CiAgICAgIHJlbW92ZVNlbGVjdGlvbigpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gbmV4dEhlYWRlcihlbCwgbGV2ZWwsIGlzQ29sbGFwc2VkKSB7CiAgICBlbC5jbGFzc0xpc3RbaXNDb2xsYXBzZWQgPyAiYWRkIiA6ICJyZW1vdmUiXShjb2xsYXBzZWQpOwogICAgbGV0IHNlbGVjdG9yID0gaGVhZGVycy5zbGljZSgwLCBsZXZlbCkuam9pbigiLCIpLAogICAgICBlbHMgPSBbXTsKICAgIGVsID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOwogICAgd2hpbGUgKGVsICYmICFlbC5tYXRjaGVzKHNlbGVjdG9yKSkgewogICAgICBlbHNbZWxzLmxlbmd0aF0gPSBlbDsKICAgICAgZWwgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7CiAgICB9CiAgICBpZiAoZWxzLmxlbmd0aCkgewogICAgICBpZiAoaXNDb2xsYXBzZWQpIHsKICAgICAgICBhZGRDbGFzcyhlbHMsICJnaGNtLWhpZGRlbiIpOwogICAgICB9IGVsc2UgewogICAgICAgIHJlbW92ZUNsYXNzKGVscywgY29sbGFwc2VkICsgIiBnaGNtLWhpZGRlbiIpOwogICAgICB9CiAgICB9CiAgfQoKICAvLyBzaG93IHNpYmxpbmdzIG9mIGhhc2ggdGFyZ2V0CiAgZnVuY3Rpb24gc2libGluZ3ModGFyZ2V0KSB7CiAgICBsZXQgbGV2ZWwgPSBwYXJzZUludCgodGFyZ2V0Lm5vZGVOYW1lIHx8ICIiKS5yZXBsYWNlKC9bXlxkXS8sICIiKSwgMTApLAogICAgICBlbCA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcsCiAgICAgIHNlbGVjdG9yID0gaGVhZGVycy5zbGljZSgwLCBsZXZlbCAtIDEpLmpvaW4oIiwiKSwKICAgICAgZWxzID0gW3RhcmdldF07CiAgICB3aGlsZSAoZWwgJiYgIWVsLm1hdGNoZXMoc2VsZWN0b3IpKSB7CiAgICAgIGVsc1tlbHMubGVuZ3RoXSA9IGVsOwogICAgICBlbCA9IGVsLm5leHRFbGVtZW50U2libGluZzsKICAgIH0KICAgIGVsID0gdGFyZ2V0LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7CiAgICB3aGlsZSAoZWwgJiYgIWVsLm1hdGNoZXMoc2VsZWN0b3IpKSB7CiAgICAgIGVsc1tlbHMubGVuZ3RoXSA9IGVsOwogICAgICBlbCA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7CiAgICB9CiAgICBpZiAoZWxzLmxlbmd0aCkgewogICAgICBlbHMgPSBlbHMuZmlsdGVyKGVsID0+IHsKICAgICAgICByZXR1cm4gZWwubm9kZU5hbWUgPT09IHRhcmdldC5ub2RlTmFtZTsKICAgICAgfSk7CiAgICAgIHJlbW92ZUNsYXNzKGVscywgImdoY20taGlkZGVuIik7CiAgICB9CiAgICBuZXh0SGVhZGVyKHRhcmdldCwgbGV2ZWwsIGZhbHNlKTsKICB9CgogIGZ1bmN0aW9uIHJlbW92ZVNlbGVjdGlvbigpIHsKICAgIC8vIHJlbW92ZSB0ZXh0IHNlbGVjdGlvbiAtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMxNzEzNDgvMTQ1MzQ2CiAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbiA/IHdpbmRvdy5nZXRTZWxlY3Rpb24oKSA6IGRvY3VtZW50LnNlbGVjdGlvbjsKICAgIGlmIChzZWwpIHsKICAgICAgaWYgKHNlbC5yZW1vdmVBbGxSYW5nZXMpIHsKICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7CiAgICAgIH0gZWxzZSBpZiAoc2VsLmVtcHR5KSB7CiAgICAgICAgc2VsLmVtcHR5KCk7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGFkZEJpbmRpbmcoKSB7CiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGV2ZW50ID0+IHsKICAgICAgbGV0IHRhcmdldCA9IGV2ZW50LnRhcmdldDsKICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoImFuY2hvciIpIHx8IHRhcmdldC5ub2RlTmFtZSA9PT0gIkEiIHx8CiAgICAgICAgdGFyZ2V0Lm5vZGVOYW1lID09PSJJTUciKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIC8vIGNoZWNrIGlmIGVsZW1lbnQgaXMgaW5zaWRlIGEgaGVhZGVyCiAgICAgIHRhcmdldCA9IGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBoZWFkZXJzLmpvaW4oIiwiKSk7CiAgICAgIGlmICh0YXJnZXQgJiYgaGVhZGVycy5pbmRleE9mKHRhcmdldC5ub2RlTmFtZSB8fCAiIikgPiAtMSkgewogICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgaGVhZGVyIGlzIGluc2lkZSBvZiBtYXJrZG93bgogICAgICAgIGlmIChjbG9zZXN0KHRhcmdldCwgYC4ke21hcmtkb3dufWApKSB7CiAgICAgICAgICB0b2dnbGUodGFyZ2V0LCBldmVudC5zaGlmdEtleSk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGNoZWNrSGFzaCgpIHsKICAgIGxldCBlbCwgZWxzLCBtZCwgdG1wLAogICAgICBtZHMgPSAkJChgLiR7bWFya2Rvd259YCk7CiAgICBmb3IgKG1kIG9mIG1kcykgewogICAgICBlbHMgPSAkJChoZWFkZXJzLmpvaW4oIiwiKSwgbWQpOwogICAgICBpZiAoZWxzLmxlbmd0aCA+IDEpIHsKICAgICAgICBmb3IgKGVsIG9mIGVscykgewogICAgICAgICAgaWYgKGVsICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMoY29sbGFwc2VkKSkgewogICAgICAgICAgICB0b2dnbGUoZWwsIHRydWUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgLy8gb3BlbiB1cAogICAgdG1wID0gKHdpbmRvdy5sb2NhdGlvbi5oYXNoIHx8ICIiKS5yZXBsYWNlKC8jLywgIiIpOwogICAgaWYgKHRtcCkgewogICAgICBlbHMgPSAkKGAjdXNlci1jb250ZW50LSR7dG1wfWApOwogICAgICBpZiAoZWxzICYmIGVscy5jbGFzc0xpc3QuY29udGFpbnMoImFuY2hvciIpKSB7CiAgICAgICAgZWwgPSBlbHMucGFyZW50Tm9kZTsKICAgICAgICBpZiAoZWwubWF0Y2hlcyhoZWFkZXJzLmpvaW4oIiwiKSkpIHsKICAgICAgICAgIHNpYmxpbmdzKGVsKTsKICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSBlbC5vZmZzZXRUb3A7CiAgICAgICAgICAvLyBzZXQgc2Nyb2xsVG9wIGEgc2Vjb25kIHRpbWUsIGluIGNhc2Ugb2YgYnJvd3NlciBsYWcKICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gZWwub2Zmc2V0VG9wOwogICAgICAgICAgfSwgNTAwKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGNoZWNrQ29sb3JzKCkgewogICAgaWYgKCFjb2xvcnMgfHwgY29sb3JzLmxlbmd0aCAhPT0gNikgewogICAgICBjb2xvcnMgPSBbXS5jb25jYXQoZGVmYXVsdENvbG9ycyk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBpbml0KCkgewogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiaGVhZCIpLmFwcGVuZENoaWxkKGFycm93Q29sb3JzKTsKICAgIGNoZWNrQ29sb3JzKCk7CiAgICBhZGRDb2xvcnMoKTsKICAgIGFkZEJpbmRpbmcoKTsKICAgIGlmIChzdGFydENvbGxhcHNlZCkgewogICAgICBjaGVja0hhc2goKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uICQoc2VsZWN0b3IsIGVsKSB7CiAgICByZXR1cm4gKGVsIHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsKICB9CiAgZnVuY3Rpb24gJCQoc2VsZWN0b3JzLCBlbCkgewogICAgcmV0dXJuIEFycmF5LmZyb20oKGVsIHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9ycykpOwogIH0KICBmdW5jdGlvbiBhZGRDbGFzcyhlbHMsIG5hbWUpIHsKICAgIGZvciAobGV0IGVsIG9mIGVscykgewogICAgICBlbC5jbGFzc0xpc3QuYWRkKG5hbWUpOwogICAgfQogIH0KICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbHMsIG5hbWUpIHsKICAgIG5hbWUgPSAobmFtZSB8fCAiIikuc3BsaXQoIiAiKTsKICAgIGZvciAobGV0IGVsIG9mIGVscykgewogICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLm5hbWUpOwogICAgfQogIH0KICBmdW5jdGlvbiBjbG9zZXN0KGVsLCBzZWxlY3RvcikgewogICAgd2hpbGUgKGVsICYmIGVsLm5vZGVOYW1lICE9PSAiQk9EWSIgJiYgIWVsLm1hdGNoZXMoc2VsZWN0b3IpKSB7CiAgICAgIGVsID0gZWwucGFyZW50Tm9kZTsKICAgIH0KICAgIHJldHVybiBlbCAmJiBlbC5tYXRjaGVzKHNlbGVjdG9yKSA/IGVsIDogbnVsbDsKICB9CgogIC8vIEFkZCBHTSBvcHRpb25zCiAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZCgiU2V0IGNvbGxhcHNlIG1hcmtkb3duIHN0YXRlIiwgKCkgPT4gewogICAgbGV0IHZhbCA9IHByb21wdCgiSW5pdGlhbGx5IGNvbGxhcHNlIGhlYWRlcnM6IiwgIXN0YXJ0Q29sbGFwc2VkKTsKICAgIGlmICh2YWwgIT09IG51bGwpIHsKICAgICAgc3RhcnRDb2xsYXBzZWQgPSAvXnQvLnRlc3QodmFsKTsKICAgICAgR01fc2V0VmFsdWUoImdoY20tY29sbGFwc2VkIiwgc3RhcnRDb2xsYXBzZWQpOwogICAgICBjb25zb2xlLmxvZyhgR2l0SHViIENvbGxhcHNlIE1hcmtkb3duOiBIZWFkZXJzIHdpbGwgJHtzdGFydENvbGxhcHNlZCA/ICJiZSIgOiAibm90IGJlIn0gaW5pdGlhbGx5IGNvbGxhcHNlZGApOwogICAgfQogIH0pOwogIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQoIlNldCBjb2xsYXBzZSBtYXJrZG93biBjb2xvcnMiLCAoKSA9PiB7CiAgICBsZXQgdmFsID0gcHJvbXB0KCJTZXQgaGVhZGVyIGFycm93IGNvbG9yczoiLCBKU09OLnN0cmluZ2lmeShjb2xvcnMpKTsKICAgIGlmICh2YWwgIT09IG51bGwpIHsKICAgICAgLy8gYWxsb3cgcGFzdGluZyBpbiBhIEpTT04gZm9ybWF0CiAgICAgIHRyeSB7CiAgICAgICAgdmFsID0gSlNPTi5wYXJzZSh2YWwpOwogICAgICAgIGlmICh2YWwgJiYgdmFsLmxlbmd0aCA9PT0gNikgewogICAgICAgICAgY29sb3JzID0gdmFsOwogICAgICAgICAgR01fc2V0VmFsdWUoImdoY20tY29sb3JzIiwgY29sb3JzKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCJHaXRIdWIgQ29sbGFwc2UgTWFya2Rvd246IGNvbG9ycyBzZXQgdG8iLCBjb2xvcnMpOwogICAgICAgICAgYWRkQ29sb3JzKCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkdpdEh1YiBDb2xsYXBzZSBNYXJrZG93bjogaW52YWxpZCBjb2xvciBkZWZpbml0aW9uICg2IGNvbG9ycykiLCB2YWwpOwogICAgICAgICAgLy8gcmVzZXQgY29sb3JzIHRvIGRlZmF1bHQgKGluIGNhc2UgY29sb3JzIHZhcmlhYmxlIGlzIGNvcnJ1cHRlZCkKICAgICAgICAgIGNoZWNrQ29sb3JzKCk7CiAgICAgICAgfQogICAgICB9IGNhdGNoKGVycikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoIkdpdEh1YiBDb2xsYXBzZSBNYXJrZG93bjogaW52YWxpZCBKU09OIik7CiAgICAgIH0KICAgIH0KICB9KTsKCiAgaW5pdCgpOwoKfSkoKTsK"},{"name":"GitHub Sort Content","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://github.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469650752047,"data":{}},"enabled":true,"position":25,"file_url":"https://greasyfork.org/scripts/21373-github-sort-content/code/GitHub%20Sort%20Content.user.js","uuid":"2578488a-d2c0-4c6b-9c52-0c2223938b94","source":""},{"name":"Key buildings for input box(ESCAPE)","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1470000551657,"data":{}},"enabled":false,"position":26,"uuid":"ab8f1143-a6bf-4e1c-a274-ba7845b9569e","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBLZXkgYnVpbGRpbmdzIGZvciBpbnB1dCBib3goRVNDQVBFKQovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAZGVzY3JpcHRpb24gIHRyeSB0byB0YWtlIG92ZXIgdGhlIHdvcmxkIQovLyBAYXV0aG9yICAgICAgIFlvdQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09Cgp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7CiAgICBpZiAoZS5rZXlDb2RlID09IDEzKQogICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJpbnB1dCNjVmltLWNvbW1hbmQtYmFyLWlucHV0IikudmFsdWUgPSAib3BlbiBodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9zaXRlPWltZ2hwJnRibT1pc2NoJnNvdXJjZT1ocCZxPWFwcGxlIjsKICB9LCB0cnVlKTs="},{"name":"Markdown toolbar for GreasyFork and UserStyles.org","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://greasyfork.org/*forum/discussion/*","https://greasyfork.org/*forum/post/discussion*","https://greasyfork.org/*forum/vanilla/post/editdiscussion/*","https://greasyfork.org/*forum/post/editdiscussion/*","https://greasyfork.org/*scripts/*/versions/new*","https://greasyfork.org/*script_versions/new*","https://greasyfork.org/*forum/messages/*","https://greasyfork.org/*forum/profile/*/*","https://greasyfork.org/*forum/profile","https://forum.userstyles.org/discussion/*","https://forum.userstyles.org/post/discussion*","https://forum.userstyles.org/messages/*","https://forum.userstyles.org/messages/add*","https://forum.userstyles.org/vanilla/post/editdiscussion/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469647102771,"data":{}},"enabled":false,"position":27,"file_url":"https://greasyfork.org/scripts/6779-markdown-toolbar-for-greasyfork-and-userstyles-org/code/Markdown%20toolbar%20for%20GreasyFork%20and%20UserStylesorg.user.js","uuid":"5cc82063-5f1b-4e7d-90b9-b4dfbed31aa5","source":""},{"name":"Better Styling for Chrome Extension: Quick Tabs","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://*","http://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1470515788848,"data":{}},"enabled":false,"position":28,"uuid":"c579cc31-9b02-41e4-b74e-e6a46c55bc66","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgQmV0dGVyIFN0eWxpbmcgZm9yIENocm9tZSBFeHRlbnNpb246IFF1aWNrIFRhYnMKLy8gQG5hbWVzcGFjZSAgICAgaHR0cDovL3VzZXJzdHlsZXMub3JnCi8vIEBkZXNjcmlwdGlvbgkgIFNQRUNJQUwgSU5TVEFMTEFUSU9OIElOU1RSVUNUSU9OUyAtIERPIE5PVCBJTlNUQUxMIFdJVEggU1RZTElTSAovLyBAYXV0aG9yICAgICAgICBCdW5ueXNsaXBwZXJzCi8vIEBob21lcGFnZSAgICAgIGh0dHBzOi8vdXNlcnN0eWxlcy5vcmcvc3R5bGVzLzk5OTM4Ci8vIEBpbmNsdWRlICAgICAgIGh0dHBzOi8vKgovLyBAaW5jbHVkZSAgICAgICBodHRwOi8vKgovLyBAZ3JhbnQgICAgICAgICBHTV9hZGRTdHlsZQovLyBAcnVuLWF0ICAgICAgICBkb2N1bWVudC1zdGFydAovLyBAdmVyc2lvbiAgICAgICAwLjIwMTYwMzI1MTAwNzE0Ci8vID09L1VzZXJTY3JpcHQ9PQooZnVuY3Rpb24oKSB7dmFyIGNzcyA9IFsKCSIvKnYyLjEgVXBkYXRlZCAzLjI1LjE2Ki8iLAoJIiIsCgkiYm9keSB7IiwKCSJtYXgtaGVpZ2h0OiA2MDBweDsiLAoJIndpZHRoOjc1MHB4OyIsCgkifSIsCgkiIiwKCSJkaXYge2JveC1zaXppbmc6Ym9yZGVyLWJveH0iLAoJIiIsCgkiIiwKCSIucXNfd3JhcHBlciB7IiwKCSJmbG9hdDpsZWZ0OyIsCgkid2lkdGg6MTAwJTsiLAoJIm1hcmdpbjowIDAgNHB4IDA7IiwKCSJwYWRkaW5nLWxlZnQ6IDEwcHg7IiwKCSJ9IiwKCSIiLAoJIi5xc19pbnB1dCB7IiwKCSJtYXJnaW46IDRweCAwIDAgMHB4OyIsCgkiaGVpZ2h0OjMycHg7IiwKCSJ3aWR0aDo5NyU7IiwKCSJib3JkZXItcmFkaXVzOiA1cHg7IiwKCSJkaXNwbGF5OiBibG9jazsiLAoJImZsb2F0OiBsZWZ0OyIsCgkiYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxNSwgMjM1LCAxMzkpOyIsCgkiYm9yZGVyOiAxcHggc29saWQgcmdiKDE1MywgMTUzLCAxNTMpOyIsCgkifSIsCgkiIiwKCSIudGFiLCAuYm9va21hcmssIGRpdi5zZXBhcmF0b3IuYmlnIHsiLAoJImJvcmRlcjogMXB4IHNvbGlkICNEMkNDQ0M7IiwKCSJwYWRkaW5nOiA1cHg7IiwKCSIvKiBwYWRkaW5nLWJvdHRvbTogNXB4OyAqLyIsCgkiYm9yZGVyLXJhZGl1czogNXB4OyIsCgkibWFyZ2luLWJvdHRvbTogM3B4OyIsCgkibWFyZ2luLXJpZ2h0OiAyJTsiLAoJImJveC1zaGFkb3c6IDJweCAycHggNXB4ICNhYWE7IiwKCSJ3aWR0aDogMzElOyIsCgkiZmxvYXQ6bGVmdDsiLAoJImRpc3BsYXk6aW5saW5lOyIsCgkiLypjb2xvcjogcmdiKDMyLDYxLDExNik7Ki8iLAoJImNsZWFyOm5vbmU7IiwKCSJjb2xvcjogcmdiKDI5LCAxMDEsIDE1OCk7IiwKCSJmb250LXdlaWdodDogNTAwOyIsCgkiYmFja2dyb3VuZC1pbWFnZTogLW1vei1saW5lYXItZ3JhZGllbnQodG9wLCAgcmdiYSgwLDAsMCwwKSAwJSwgcmdiYSgxMjIsMTIyLDEyMiwwLjE4KSA5OSUsIHJnYmEoMTIyLDEyMiwxMjIsMC4xOCkgMTAwJSk7IiwKCSJiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBjb2xvci1zdG9wKDAlLHJnYmEoMCwwLDAsMCkpLCBjb2xvci1zdG9wKDk5JSxyZ2JhKDEyMiwxMjIsMTIyLDAuMTgpKSwgY29sb3Itc3RvcCgxMDAlLHJnYmEoMTIyLDEyMiwxMjIsMC4xOCkpKTsiLAoJImJhY2tncm91bmQtaW1hZ2U6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwgIHJnYmEoMCwwLDAsMCkgMCUscmdiYSgxMjIsMTIyLDEyMiwwLjE4KSA5OSUscmdiYSgxMjIsMTIyLDEyMiwwLjE4KSAxMDAlKTsiLAoJImJhY2tncm91bmQtaW1hZ2U6IC1vLWxpbmVhci1ncmFkaWVudCh0b3AsICByZ2JhKDAsMCwwLDApIDAlLHJnYmEoMTIyLDEyMiwxMjIsMC4xOCkgOTklLHJnYmEoMTIyLDEyMiwxMjIsMC4xOCkgMTAwJSk7IiwKCSJiYWNrZ3JvdW5kLWltYWdlOiAtbXMtbGluZWFyLWdyYWRpZW50KHRvcCwgIHJnYmEoMCwwLDAsMCkgMCUscmdiYSgxMjIsMTIyLDEyMiwwLjE4KSA5OSUscmdiYSgxMjIsMTIyLDEyMiwwLjE4KSAxMDAlKTsiLAoJImJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICByZ2JhKDAsMCwwLDApIDAlLHJnYmEoMTIyLDEyMiwxMjIsMC4xOCkgOTklLHJnYmEoMTIyLDEyMiwxMjIsMC4xOCkgMTAwJSk7IiwKCSJvdmVyZmxvdzogaGlkZGVuOyIsCgkiaGVpZ2h0OiAzLjVlbTsiLAoJIn0iLAoJIiIsCgkiLyoiLAoJImRpdi50YWJpbWFnZSB7IiwKCSJmbG9hdDogbGVmdDsiLAoJIn0iLAoJIiAqLyIsCgkiIiwKCSJkaXYudGFiaW1hZ2UgaW1nIHsiLAoJInZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IiwKCSJwYWRkaW5nOiA0cHg7IiwKCSJwYWRkaW5nLWxlZnQ6IDA7IiwKCSJ9IiwKCSIiLAoJImRpdi5jb250ZW50IHsiLAoJIm1hcmdpbjogNHB4IDA7IiwKCSJwYWRkaW5nOjA7IiwKCSJwYWRkaW5nLWxlZnQ6IDEwcHg7IiwKCSJmbG9hdDogbGVmdDsiLAoJImhlaWdodDo2MDBweDsiLAoJIndpZHRoOjEwMCU7IiwKCSJ9IiwKCSIiLAoJIi5oaWdobGlnaHQgeyIsCgkidGV4dC1kZWNvcmF0aW9uOiBub25lOyIsCgkiYm9yZGVyLWJvdHRvbS13aWR0aDoxcHg7IiwKCSJib3JkZXItYm90dG9tLXN0eWxlOmRvdHRlZDsiLAoJIn0iLAoJIiIsCgkiLndpdGhmb2N1cyB7IiwKCSJiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwxNDYsMTAsLjcpOyIsCgkiLypmb250LXdlaWdodDogNDAwOyovIiwKCSIiLAoJIn0iLAoJIiIsCgkiZGl2LmNsb3NlZCB7IiwKCSJiYWNrZ3JvdW5kLWltYWdlOiBub25lOyIsCgkiLyogYmFja2dyb3VuZC1jb2xvcjogI2RmZGZkZjsgKi8iLAoJIm9wYWNpdHk6IC42OyIsCgkiY29sb3I6ICM1NTU7IiwKCSJ9IiwKCSIiLAoJImRpdi5jbG9zZWQud2l0aGZvY3VzIHtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDE0NiwxMCwuNCk7IiwKCSJ9IiwKCSIiLAoJImRpdi5jbG9zZWQud2l0aGZvY3VzIGRpdi50aXRsZSB7IiwKCSJiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsiLAoJIn0iLAoJIiIsCgkiZGl2LnVybCB7IiwKCSJjb2xvcjogIzc3NzsiLAoJIiAgd2lkdGg6IDcxJTsiLAoJIiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7IiwKCSIgIHdoaXRlLXNwYWNlOiBub3dyYXA7IiwKCSIgIG92ZXJmbG93OiBoaWRkZW47IiwKCSJ9IiwKCSIiLAoJImRpdi5jbG9zZSB7IiwKCSJmbG9hdDogcmlnaHQ7IiwKCSJkaXNwbGF5OiBpbmxpbmU7IiwKCSJvcGFjaXR5OiAuNTsiLAoJImJvcmRlcjogMXB4IHNvbGlkICM5OTkxOTE7IiwKCSJiYWNrZ3JvdW5kLWNvbG9yOiAjRjFFRUEwOyIsCgkiYm9yZGVyLXJhZGl1czogM3B4OyIsCgkidG9wOiAwICFpbXBvcnRhbnQ7IiwKCSJyaWdodDogMCAhaW1wb3J0YW50OyIsCgkifSIsCgkiIiwKCSJkaXYud2l0aGZvY3VzLm9wZW4gZGl2LmNsb3NlIHsiLAoJInRvcDogMCAhaW1wb3J0YW50OyIsCgkicmlnaHQ6IDAgIWltcG9ydGFudDsiLAoJIn0iLAoJImRpdi5jbG9zZTpob3ZlciB7b3BhY2l0eToxO2JhY2tncm91bmQtY29sb3I6IHJnYigyMzUsIDE5LCAxOSkgIWltcG9ydGFudDt9IiwKCSIiLAoJIi50aXRsZSB7b3ZlcmZsb3c6IGhpZGRlbjsgd2lkdGg6IDcxJTt9IiwKCSIiLAoJImRpdi5zZXBhcmF0b3IuYmlnIHsiLAoJIiAgY29sb3I6ICMyMTIxMjE7IiwKCSIgICAgaGVpZ2h0OiAyZW07IiwKCSJmb250LXNpemU6MTJweDsiLAoJIiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE5OCwgMjEyLCAyNTUpOyIsCgkicGFkZGluZzowOyIsCgkid2lkdGg6OTclIiwKCSJ9IiwKCSIiLAoJImRpdi5zZXBhcmF0b3IuYmlnOmJlZm9yZSwgZGl2LnNlcGFyYXRvci5iaWc6YWZ0ZXIgeyIsCgkiICBjb250ZW50OiBcIuKWvFwiOyIsCgkifSIsCgkiIiwKCSIiLAoJImRpdi5zZXBhcmF0b3IuYmlnIHNwYW4geyIsCgkiICAiLAoJIiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyIsCgkiICAiLAoJIn0iLAoJIiIsCgkiIC53aXRoZm9jdXMgZGl2LnRpdGxlLCBkaXYuY2xvc2VkLndpdGhmb2N1cyBkaXYudGl0bGUsIC53aXRoZm9jdXMgZGl2LnVybCB7IiwKCSIgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyIsCgkiICBjb2xvcjogaW5oZXJpdDsiLAoJIn0iLAoJIiIsCgkiIiwKCSIiLAoJImRpdi50YWJpbWFnZSBpbWcgeyIsCgkiYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDsiLAoJIn0iLAoJIi5ib29rbWFyayBkaXYge2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7fSIsCgkiLmJvb2ttYXJrIHsiLAoJIiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzMCwgMjQwLCAxOTApOyIsCgkiICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjA3KTsiLAoJIn0iLAoJIiIsCgkiLndpdGhmb2N1cyB7IiwKCSIgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAxNDYsIDEwLCAwLjcpICFpbXBvcnRhbnQ7IiwKCSIgIGNvbG9yOiM3Nzc7IiwKCSJ9IiwKCSIiLAoJIi8qIGkgcmVhbGx5IHdhbnQgdGhpcyB0byBiZSBnbG9iYWwgKi8iCl0uam9pbigiXG4iKTsKaWYgKHR5cGVvZiBHTV9hZGRTdHlsZSAhPSAidW5kZWZpbmVkIikgewoJR01fYWRkU3R5bGUoY3NzKTsKfSBlbHNlIGlmICh0eXBlb2YgUFJPX2FkZFN0eWxlICE9ICJ1bmRlZmluZWQiKSB7CglQUk9fYWRkU3R5bGUoY3NzKTsKfSBlbHNlIGlmICh0eXBlb2YgYWRkU3R5bGUgIT0gInVuZGVmaW5lZCIpIHsKCWFkZFN0eWxlKGNzcyk7Cn0gZWxzZSB7Cgl2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7Cglub2RlLnR5cGUgPSAidGV4dC9jc3MiOwoJbm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTsKCXZhciBoZWFkcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIik7CglpZiAoaGVhZHMubGVuZ3RoID4gMCkgewoJCWhlYWRzWzBdLmFwcGVuZENoaWxkKG5vZGUpOyAKCX0gZWxzZSB7CgkJLy8gbm8gaGVhZCB5ZXQsIHN0aWNrIGl0IHdoZXJlZXZlcgoJCWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTsKCX0KfQp9KSgpOwo="},{"name":"Focus input text field on Esc","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1469646891387,"data":{}},"enabled":false,"position":29,"file_url":"https://greasyfork.org/scripts/9525-focus-input-text-field-on-esc/code/Focus%20input%20text%20field%20on%20Esc.user.js","uuid":"3bea198d-a20c-48eb-874a-6c73abd5eed5","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgRm9jdXMgaW5wdXQgdGV4dCBmaWVsZCBvbiBFc2MKLy8gQGRlc2NyaXB0aW9uICAgRm9jdXMgdGhlIGZpcnN0IHZpc2libGUgaW5wdXQgdGV4dCBmaWVsZCB3aGVuIHlvdSBwcmVzcyBFc2Mga2V5LCBvciByZXN0b3JlIHRoZSBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbiBzZWNvbmQgcHJlc3MKLy8gQHZlcnNpb24gICAgICAgMS4wLjQKLy8gQGluY2x1ZGUgICAgICAgKgovLyBAYXV0aG9yICAgICAgICB3T3h4T20KLy8gQG5hbWVzcGFjZSAgICAgd094eE9tLnNjcmlwdHMKLy8gQGxpY2Vuc2UgICAgICAgTUlUIExpY2Vuc2UKLy8gQHJ1bi1hdCAgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgVEVYVF9GSUVMRCA9ICcgc2VhcmNoIHRleHQgbnVtYmVyIHVybCAnOwp2YXIgcHJldmlvdXNFbGVtZW50Owp2YXIgZmlyc3Q7Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZSkgewoJaWYgKGUua2V5Q29kZSAhPSAyNyB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSB8fCBlLm1ldGFLZXkpCgkJcmV0dXJuOwoJLy8gZmluZCB0ZXh0IGlucHV0cyBpbnNpZGUgdmlzaWJsZSBET00gY29udGFpbmVycwoJdmFyIGlucHV0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpOwoJZm9yICh2YXIgaT0wLCBpbnB1dCwgaWw9aW5wdXRzLmxlbmd0aDsgaTxpbCAmJiAoaW5wdXQ9aW5wdXRzW2ldKTsgaSsrKSB7CgkJdmFyIHByaW9yaXR5ID0gVEVYVF9GSUVMRC5pbmRleE9mKCcgJytpbnB1dC50eXBlKycgJyk7CgkJaWYgKHByaW9yaXR5ID49IDApIHsKCQkJdmFyIG49aW5wdXQsIHN0eWxlOwoJCQl3aGlsZSAobiAmJiBuLnN0eWxlICYmIChzdHlsZT1nZXRDb21wdXRlZFN0eWxlKG4pKSAmJiBzdHlsZS5kaXNwbGF5IT0nbm9uZScgJiYgc3R5bGUudmlzaWJpbGl0eSE9J2hpZGRlbicpCgkJCQluID0gbi5wYXJlbnROb2RlOwoJCQlpZiAoIW4gfHwgIW4uc3R5bGUpIHsKCQkJCWlmICghZmlyc3QgLy8gc2V0IHRoZSBmaXJzdCBPUiBpZiBpdCdzIGVtcHR5LCB0cnkgdG8gc2VsZWN0IGFuIGlkZW50aWNhbGx5IG5hbWVkIGlucHV0IGZpZWxkIHdpdGggc29tZSB0ZXh0IChoYXBwZW5zIG9uIHNvbWUgc2l0ZXMpCgkJCQkJCXx8IChpbnB1dC52YWx1ZSAmJiBpbnB1dC5uYW1lID09IGZpcnN0Lm5hbWUgJiYgKCFpbnB1dC5mb3JtICYmICFmaXJzdC5mb3JtIHx8IGlucHV0LmZvcm0uYWN0aW9uID09IGZpcnN0LmZvcm0uYWN0aW9uKSkpIHsKCQkJCQlmaXJzdCA9IGlucHV0OwoJCQkJCWlmIChmaXJzdC52YWx1ZSkKCQkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQl9Cgl9CgoJaWYgKGZpcnN0KSB7CgkJaWYgKGZpcnN0ICE9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHsKCQkJLy8gc3dpdGNoIHRvIHRoZSBmb3VuZCBpbnB1dCBmaWVsZAoJCQlwcmV2aW91c0VsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50OwoJCQlvbmtleXVwKGZ1bmN0aW9uKCl7CgkJCQlmaXJzdC5mb2N1cygpOwoJCQkJZmlyc3Quc2VsZWN0KCk7CgkJCX0pOwoJCX0gZWxzZSBpZiAocHJldmlvdXNFbGVtZW50KSB7CgkJCS8vIHJlc3RvcmUgZm9jdXMgdG8gdGhlIGVsZW1lbnQgZnJvbSB3aGljaCB3ZSBqdW1wZWQgdG8gYW4gaW5wdXQgZmllbGQgcHJldmlvdXNseQoJCQlvbmtleXVwKGZ1bmN0aW9uKCl7CgkJCQlkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTsgLy8gaW4gY2FzZSBkb2N1bWVudC5ib2R5IChwYWdlICJiYWNrZ3JvdW5kIikgd2FzIHByZXZpb3VzbHkgc2VsZWN0ZWQKCQkJCXByZXZpb3VzRWxlbWVudC5mb2N1cygpOwoJCQl9KTsKCQl9Cgl9CgoJLy8gZm9jdXNpbmcgc2hvdWxkIGJlIGRvbmUgYXQga2V5LXVwIHRvIHByZXZlbnQgdGhlIEVzYy1rZXlkb3duIGJlaW5nIGFsc28gY2hhaW4taGFuZGxlZCBieSB0aGUganVzdCBmb2N1c2VkIGVsZW1lbnQKCWZ1bmN0aW9uIG9ua2V5dXAoY2IpIHsKCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIGtleXVwKGUpIHsKCQkJaWYgKGUua2V5Q29kZSA9PSAyNykgewoJCQkJZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBrZXl1cCk7CgkJCQljYihlKTsKCQkJfQoJCX0pOwoJfQp9KTsK"},{"name":"HabraGoogle","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://*habrahabr.ru/*","https://*habrahabr.ru/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1470897453851,"data":{}},"enabled":false,"position":30,"file_url":"http://linux.ria.ua/HabraGoogle/download/habragoogle.user.js","uuid":"18a1be30-99ae-4bfb-8881-046dad2a668d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIEhhYnJhR29vZ2xlCi8vIEBuYW1lc3BhY2UgICAgICBodHRwOi8vbGludXgucmlhLnVhCi8vIEBkZXNjcmlwdGlvbiAgICBHb29nbGUgU2VhcmNoIGZvciBIYWJyYUhhYnIucnUKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly8qaGFicmFoYWJyLnJ1LyoKLy8gQGluY2x1ZGUgICAgICAgIGh0dHBzOi8vKmhhYnJhaGFici5ydS8qCi8vIEBzb3VyY2UgICAgICAgICBodHRwOi8vbGludXgucmlhLnVhL2hhYnJhZ29vZ2xlLwovLyBAdmVyc2lvbiAgICAgICAgMC4xCi8vID09L1VzZXJTY3JpcHQ9PQoKdmFyIGhnQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKaGdCdXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpOwpoZ0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnZ3NlYXJjaCcpOwpoZ0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ0hhYnJhR29vZ2xlID4nKTsKaGdCdXR0b24uc2V0QXR0cmlidXRlKCdzdHlsZScsICdtYXJnaW4tcmlnaHQ6MTJweCcpOwpoZ0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ29uQ2xpY2snLCAiZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuZ29vZ2xlLnJ1L3NlYXJjaD9obD1ydSZxPScgKyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoX2ZpZWxkJykudmFsdWUgKyAnK3NpdGUlM0FoYWJyYWhhYnIucnUnIik7Cgp2YXIgaGdDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVudV90YWInKS5wYXJlbnROb2RlLnBhcmVudE5vZGU7CmhnQ29udGFpbmVyLmFwcGVuZENoaWxkKGhnQnV0dG9uKTs="},{"name":"_Amazon Search, alter results","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://www.amazon.com/s/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1471404751062,"data":{}},"enabled":false,"position":31,"uuid":"b952abf0-edbb-49f2-9035-f97825b97ddf","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgIF9BbWF6b24gU2VhcmNoLCBhbHRlciByZXN1bHRzCi8vIEBpbmNsdWRlICBodHRwczovL3d3dy5hbWF6b24uY29tL3MvKgovLy8vIEByZXF1aXJlICBodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuNy4yL2pxdWVyeS5taW4uanMKLy8vLyBAcmVxdWlyZSAgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcmF3LzI2MjU4OTEvd2FpdEZvcktleUVsZW1lbnRzLmpzCi8vIEBncmFudCAgICBHTV9hZGRTdHlsZQovLyA9PS9Vc2VyU2NyaXB0PT0KLyotIFRoZSBAZ3JhbnQgZGlyZWN0aXZlIGlzIG5lZWRlZCB0byB3b3JrIGFyb3VuZCBhIGRlc2lnbiBjaGFuZ2UKICAgIGludHJvZHVjZWQgaW4gR00gMS4wLiAgIEl0IHJlc3RvcmVzIHRoZSBzYW5kYm94LgoqLwoKLy9mdW5jdGlvbiBhZGRDdXN0b21TZWFyY2hSZXN1bHQgKGpOb2RlKSB7CiAgICAvLyoqKioqIFlPVVIgQ09ERSBIRVJFICoqKioqCiAgICAvL2FsZXJ0KCdpdCB3b3JrcycpOwogLy8gICAgICAgICAgICAgICBqTm9kZS5wcmVwZW5kICgKICAvLyAgICAgICAgICAgICAgJzxkaXYgaWQ9InJlc3VsdF8wMDAiIGNsYXNzPSJmc3RSb3ciPkJ1eSBteSBzdHVmZiwgaW5zdGVhZCE8L2Rpdj4nCiAgIC8vICAgICAgICAgKTsKCi8vfQoKLy93YWl0Rm9yS2V5RWxlbWVudHMgKCIjYmNLd1RleHQiLCBhZGRDdXN0b21TZWFyY2hSZXN1bHQpOwoKdmFyIG11dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzLXJlc3VsdC1jb3VudCcpOwp2YXIgdGV4dE5vZGUgPSBtdXQuZmlyc3RDaGlsZDsKbXV0LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNoYXJhY3RlckRhdGFNb2RpZmllZCcsIGZ1bmN0aW9uKCkgeyBhbGVydCgnaGknKTsgfSwgZmFsc2UpOwoKCgoKCgoKCgo="},{"name":"EXAMPLES","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1471493570822,"data":{}},"enabled":false,"position":32,"uuid":"73513279-554c-4741-b33a-6aa5a4992f5d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBFWEFNUExFUwovLyBAbmFtZXNwYWNlICAgIGNocmlzdGlhbnZ1ZXJpbmdzCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgTG9hZCBsb2NhbCBKYXZhU2NyaXB0IGFuZCBDU1MKLy8gQGF1dGhvciAgICAgICBDaHJpc3RpYW4gVnVlcmluZ3MKLy8gQG1hdGNoICAgICAgICAqOi8vKi8qCi8vIEByZXF1aXJlICAgICAgZmlsZTovLy9Vc2Vycy9jaHJpc3RpYW4vUHJvamVjdHMvc2lzLWN1c3RvbS9kaXN0L3Npc19jcy5qcwovLyBAcmVzb3VyY2UgICAgIHNpc19jcyBmaWxlOi8vL1VzZXJzL2NocmlzdGlhbi9Qcm9qZWN0cy9zaXMtY3VzdG9tL2Rpc3Qvc2lzX2NzLmNzcwovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICAgR01fZ2V0UmVzb3VyY2VUZXh0Ci8vID09L1VzZXJTY3JpcHQ9PQoKdmFyIHNpc19jcyA9IEdNX2dldFJlc291cmNlVGV4dCgic2lzX2NzIik7CkdNX2FkZFN0eWxlKHNpc19jcyk7CgoKCgovLyAxLiDQodC+0LfQtNCw0ZHQvCDQvdC+0LLRi9C5INC+0LHRitC10LrRgiBYTUxIdHRwUmVxdWVzdAp2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CgovLyAyLiDQmtC+0L3RhNC40LPRg9GA0LjRgNGD0LXQvCDQtdCz0L46IEdFVC3Qt9Cw0L/RgNC+0YEg0L3QsCBVUkwgJ3Bob25lcy5qc29uJwp4aHIub3BlbignR0VUJywgJ3Bob25lcy5qc29uJywgZmFsc2UpOwoKLy8gMy4g0J7RgtGB0YvQu9Cw0LXQvCDQt9Cw0L/RgNC+0YEKeGhyLnNlbmQoKTsKCi8vIDQuINCV0YHQu9C4INC60L7QtCDQvtGC0LLQtdGC0LAg0YHQtdGA0LLQtdGA0LAg0L3QtSAyMDAsINGC0L4g0Y3RgtC+INC+0YjQuNCx0LrQsAppZiAoeGhyLnN0YXR1cyAhPSAyMDApIHsKICAvLyDQvtCx0YDQsNCx0L7RgtCw0YLRjCDQvtGI0LjQsdC60YMKICBhbGVydCggeGhyLnN0YXR1cyArICc6ICcgKyB4aHIuc3RhdHVzVGV4dCApOyAvLyDQv9GA0LjQvNC10YAg0LLRi9Cy0L7QtNCwOiA0MDQ6IE5vdCBGb3VuZAp9IGVsc2UgewogIC8vINCy0YvQstC10YHRgtC4INGA0LXQt9GD0LvRjNGC0LDRggogIGFsZXJ0KCB4aHIucmVzcG9uc2VUZXh0ICk7IC8vIHJlc3BvbnNlVGV4dCAtLSDRgtC10LrRgdGCINC+0YLQstC10YLQsC4KfQ=="},{"name":"HTML5 Video Keyboard Shortcuts","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1472239522962,"data":{}},"enabled":false,"position":33,"uuid":"96acec16-2230-45a0-94b0-78ca89f940dc","source":""},{"name":"Wikipedia goes 3 columns","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http://*.wikipedia.org/wiki/Main_Page"],"orig_includes":["http://*.wikipedia.org/*","https://*.wikipedia.org/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1472253840081,"data":{}},"enabled":false,"position":34,"file_url":"https://openuserjs.org/install/sepich/Wikipedia_goes_3_columns.user.js","uuid":"e73c0366-8d4f-4dc7-bfbd-5c5a14c64b2a","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFdpa2lwZWRpYSBnb2VzIDMgY29sdW1ucwovLyBAZGVzY3JpcHRpb24gRGlzcGxheSB3aWtpcGVkaWEgYXJ0aWNsZSB0ZXh0IGluIDMgY29sdW1ucyBmb3Igd2lkZXNjcmVlbiBkaXNwbGF5cwovLyBAbmFtZXNwYWNlICAgc2VwYS5zcGIucnUKLy8gQHZlcnNpb24gICAgIDIwMTQuMDkuMDUKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly8qLndpa2lwZWRpYS5vcmcvKgovLyBAaW5jbHVkZSAgICAgaHR0cHM6Ly8qLndpa2lwZWRpYS5vcmcvKgovLyBAZXhjbHVkZSAgICAgaHR0cDovLyoud2lraXBlZGlhLm9yZy93aWtpL01haW5fUGFnZQovLyBAaWNvbiAgICAgICAgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvZmF2aWNvbi5pY28KLy8gQGdyYW50ICAgICAgIEdNX2dldFJlc291cmNlVGV4dAovLyBAdXBkYXRlVVJMICAgaHR0cHM6Ly9vcGVudXNlcmpzLm9yZy9pbnN0YWxsL3NlcGljaC9XaWtpcGVkaWFfZ29lc18zX2NvbHVtbnMudXNlci5qcwovLyBAcmVxdWlyZSAgICAgaHR0cDovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktbGF0ZXN0Lm1pbi5qcwovLyBAYXV0aG9yICAgICAgaUBzZXBhLnNwYi5ydQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vaGVyZWRvYyBqcyB3cmFwcGVyIDspCmZ1bmN0aW9uIGhlcmVEb2MoZikgewogIHJldHVybiBmLnRvU3RyaW5nKCkuCiAgICAgIHJlcGxhY2UoL15bXlwvXStcL1wqIT8vLCAnJykuCiAgICAgIHJlcGxhY2UoL1wqXC9bXlwvXSskLywgJycpOwp9CgovL2Nzcwp2YXIgY3NzID0gaGVyZURvYyhmdW5jdGlvbigpIHsvKiEKLmQtY29sIHsKICAtbW96LWNvbHVtbi1jb3VudDogMzsKICAtbW96LWNvbHVtbi1nYXA6IDMwcHg7CiAgY29sdW1uLWNvdW50OiAzOwogIGNvbHVtbi1nYXA6IDMwcHg7CiAgdGV4dC1hbGlnbjoganVzdGlmeTsKfQoKdGFibGUjdG9jIHsKICBiYWNrZ3JvdW5kOiBpbmhlcml0OwogIGJvcmRlcjogMCBub25lOwogIGZvbnQtc2l6ZTogMTJweDsKICBwYWRkaW5nOiAwOwp9CiN0b2MsIC50b2MsIC5tdy13YXJuaW5nIHsgYm9yZGVyOiBub25lOyBmb250LXNpemU6IDgwJTsgfQp0YWJsZS5pbmZvYm94LCB0YWJsZS52ZXJ0aWNhbC1uYXZib3ggewogIGJvcmRlcjogMCBub25lICFpbXBvcnRhbnQ7CiAgZmxvYXQ6IG5vbmU7CiAgZm9udC1zaXplOiAxMXB4ICFpbXBvcnRhbnQ7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDAgIWltcG9ydGFudDsKICB3aWR0aDogaW5oZXJpdCAhaW1wb3J0YW50OwogIGJhY2tncm91bmQ6IGluaGVyaXQ7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoKI3RvY3RpdGxlIGgyIHsKICBwb3NpdGlvbjogaW5oZXJpdDsKICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7Cn0KI3RvY3RpdGxlIHsKICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7Cn0KYm9keS5tZWRpYXdpa2kgdGFibGUubWJveC1zbWFsbC1sZWZ0LCB0YWJsZS5hbWJveCB7IG1hcmdpbjogMDsgd2lkdGg6IGluaGVyaXQ7IH0KYm9keS5tZWRpYXdpa2kgdGFibGUubWJveC1zbWFsbCB7IHdpZHRoOiBpbmhlcml0OyBtYXJnaW46IDRweCAwOyBmbG9hdDogbm9uZTsgY2xlYXI6IG5vbmU7fQpodG1sIC50aHVtYmltYWdlIHsgYm9yZGVyOiBub25lO30KZGl2LnRyaWdodCwgZGl2LnRsZWZ0ICB7IG1hcmdpbjogMDt9CmRpdi50cmlnaHQsIGRpdi50bGVmdCwgZGl2LmZsb2F0cmlnaHQsIGRpdi5mbG9hdGxlZnQsIHRhYmxlLmZsb2F0cmlnaHQsIHRhYmxlLmZsb2F0bGVmdCB7IGZsb2F0OiBub25lOyBjbGVhcjogbm9uZTsgfQpkaXYjbXctcGFuZWwge3dpZHRoOiAxNmVtOyBvdmVyZmxvdzogYXV0bzsgcGFkZGluZy10b3A6IDIwMHB4OyB0b3A6IDA7fQojcC1sb2dvIHtsZWZ0OiAzLjVlbTsgdG9wOjA7fQojbGVmdC1uYXZpZ2F0aW9uIHttYXJnaW4tbGVmdDogMTdlbTt9CiNtdy1oZWFkLWJhc2Uge21hcmdpbi1sZWZ0OiAxN2VtO30KZGl2I2NvbnRlbnQge21hcmdpbi1sZWZ0OiAxN2VtO30KZGl2Lm13LWNvZGUsIHByZSB7b3ZlcmZsb3c6IGF1dG87fQpkaXYjZm9vdGVyIHttYXJnaW4tbGVmdDogMTZlbTt9CgojcC1uYXZpZ2F0aW9uLCAjcC1pbnRlcmFjdGlvbiwgI3AtdGIsICNwLWNvbGwtcHJpbnRfZXhwb3J0LCAjcC1wYXJ0aWNpcGF0aW9uLCAjc2l0ZU5vdGljZSB7ZGlzcGxheTogbm9uZTt9CiovfSk7IAoKLy9hcHBseSBjdXN0b20gQ1NTCnZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKcy50eXBlID0gJ3RleHQvY3NzJzsKcy5pbm5lckhUTUwgPSBjc3M7CmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzKTsKCi8vbW92ZSB0YWJsZXMgdG8gbGVmdAokKCIjbXctcGFuZWwiKS5hcHBlbmQoJCgiI3RvYyIpKTsKJCgiI213LXBhbmVsIikuYXBwZW5kKCQoInRhYmxlLnZlcnRpY2FsLW5hdmJveCIpKTsKJCgiI213LXBhbmVsIikuYXBwZW5kKCQoInRhYmxlLmluZm9ib3giKSk7CiQoIiNtdy1wYW5lbCIpLmFwcGVuZCgkKCJ0YWJsZS5tZXRhZGF0YS5tYm94LXNtYWxsIikpOwoKLy93cmFwIGNvbnRlbnRzIHRvIGQtY29sLCBzcGxpdCBieSBIMgp2YXIgbj0kKCIjbXctY29udGVudC10ZXh0IikuY2hpbGRyZW4oKTsKJCgiI213LWNvbnRlbnQtdGV4dCIpLnByZXBlbmQoIjxkaXYgY2xhc3M9J2QtY29sJy8+Iik7ICAgCnZhciBkPSQoImRpdi5kLWNvbCIpLmxhc3QoKTsKZm9yKHZhciBpPTA7IGk8bi5sZW5ndGgtMTsgaSsrKXsKICBpZiggbltpXS5ub2RlTmFtZT09IlRBQkxFIiAmJiAoJChuW2ldKS5oYXNDbGFzcygid2lraXRhYmxlIikgfHwgJChuW2ldKS5oYXNDbGFzcygibmF2Ym94IikpICl7CiAgICAkKG5baV0pLmFmdGVyKCI8ZGl2IGNsYXNzPSdkLWNvbCcvPiIpOwogICAgZD0kKCJkaXYuZC1jb2wiKS5sYXN0KCk7CiAgICBjb250aW51ZTsKICB9CiAgZWxzZSBpZihuW2ldLm5vZGVOYW1lIT0iSDIiKSB7CiAgICAkKGQpLmFwcGVuZChuW2ldKTsKICB9CiAgZWxzZSB7CiAgICAkKG5baV0pLmFmdGVyKCI8ZGl2IGNsYXNzPSdkLWNvbCcvPiIpOwogICAgZD0kKCJkaXYuZC1jb2wiKS5sYXN0KCk7CiAgfQp9CgovL3JlbW92ZSB3aWR0aC9oZWlnaHQgZnJvbSBpbWFnZXMKJCgnaW1nJykucmVtb3ZlQXR0cignd2lkdGgnKS5yZW1vdmVBdHRyKCdoZWlnaHQnKTsKJCgnZGl2LnRodW1iaW5uZXInKS5yZW1vdmVBdHRyKCdzdHlsZScpOwokKCdkaXYubm9yZXNpemUnKS5yZW1vdmVBdHRyKCdzdHlsZScpOwokKCd0YWJsZS53aWtpdGFibGUnKS5yZW1vdmVBdHRyKCdzdHlsZScpOwp2YXIgdz0kKCB3aW5kb3cgKS53aWR0aCgpOwokKCdkaXYudGh1bWIgLnRodW1iaW1hZ2UsIGRpdi5ub3Jlc2l6ZSBpbWcsIGRpdi5mbG9hdG5vbmUgaW1nLCBkaXYuZC1jb2wgaW1nLCBkaXYuZC1jb2wgcHJlLCBkaXYuZC1jb2wgLm13LWNvZGUnKS5jc3MoJ21heC13aWR0aCcsJ2NhbGMoICgnK3crJ3B4IC0gMTdlbSAtIDEyMHB4KS8zIC0gMzBweCApJyk7CgovL2NvbGxhcHNlIGxhbmd1YWdlcwokKCcjcC1sYW5nJykucmVtb3ZlQ2xhc3MoJ2V4cGFuZGVkJykuYWRkQ2xhc3MoJ2NvbGxhcHNlZCcpOwokKCcjcC1sYW5nIGRpdi5ib2R5JykuY3NzKCdkaXNwbGF5Jywnbm9uZScpOwo="},{"name":"New Userscript","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":["http://*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1472254615128,"data":{}},"enabled":false,"position":35,"uuid":"88690a40-5620-4883-bc2f-828bc7a6aeaa","source":""},{"name":"hhFiller","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://hh.ru/*","https://hh.ru/*","http://career.ru/*","https://moikrug.ru/*","http://itmozg.ru/*","http://www.superjob.ru/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1472334129971,"data":{}},"enabled":false,"position":36,"file_url":"https://greasyfork.org/scripts/10338-hhfiller/code/hhFiller.user.js","uuid":"fb37e825-73c9-4a28-bec2-1f5d307a78b6","source":""},{"name":"Google youtube search link","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/https?:\\/\\/(www\\.)?google\\.(com|(?:com?\\.)?\\w\\w)\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1472418533178,"data":{}},"enabled":false,"position":37,"file_url":"https://greasyfork.org/scripts/7784-google-youtube-search-link/code/Google%20youtube%20search%20link.user.js","uuid":"dd8113d8-d64c-488b-9302-f75cdf23218d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgR29vZ2xlIHlvdXR1YmUgc2VhcmNoIGxpbmsKLy8gQGluY2x1ZGUgICAgICAgL2h0dHBzPzpcL1wvKHd3d1wuKT9nb29nbGVcLihjb218KD86Y29tP1wuKT9cd1x3KVwvLiovCi8vIEBkZXNjcmlwdGlvbiAgIEFkZHMgYSBZb3V0dWJlIHNlYXJjaCBsaW5rOiBXZWIsIEltYWdlcywgVmlkZW9zLCBZb3V0dWJlLCBOZXdzLCBNYXBzLCBTaG9wcGluZywgLi4uCi8vIEB2ZXJzaW9uICAgICAgIDEuMS4xCi8vIEBhdXRob3IgICAgICAgIHdPeHhPbQovLyBAbmFtZXNwYWNlICAgICB3T3h4T20uc2NyaXB0cwovLyBAbGljZW5zZSAgICAgICBNSVQgTGljZW5zZQovLyBAZ3JhbnQgICAgICAgICBub25lCi8vIEBydW4tYXQgICAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEByZXF1aXJlICAgICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8xMjIyOC9jb2RlL3NldE11dGF0aW9uSGFuZGxlci5qcwovLyA9PS9Vc2VyU2NyaXB0PT0KCnZhciByZWFycmFuZ2VJbWFnZXNWaWRlb3NZb3V0dWJlID0gdHJ1ZTsgLy8gYWx3YXlzIHB1dCAoaWYgcHJlc2VudCEpICJJbWFnZXMiIHRvIDJuZCBwbGFjZSwgIlZpZGVvcyIgdG8gM3JkIHBsYWNlLCAiWW91dHViZSIgdG8gNHRoIHBsYWNlCgp2YXIgc3RhdGUgPSAwOwpzZXRNdXRhdGlvbkhhbmRsZXIoZG9jdW1lbnQsICcjaGR0YiAuaGR0Yi1taXRlbSBhJywgZnVuY3Rpb24obm9kZXMpIHsKICB2YXIgeW91dHViZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdfX1lPVVRVQkVfU0VBUkNIX18nKTsKICBpZiAoc3RhdGUgPiAxMCkKICAgIHJldHVybjsKCiAgdmFyIG1lbnUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGR0Yi1tc2InKTsKICB2YXIgcGxhY2UgPSAnYmVmb3JlZW5kJywgbm9kZSA9IG1lbnUsIGFjdGl2ZU1lbnVJdGVtLCBpbWFnZXMsIHZpZGVvczsKICAKICBpZiAocmVhcnJhbmdlSW1hZ2VzVmlkZW9zWW91dHViZSkgewogICAgdmFyIHJ4SW1hZ2UgPSAvWyY/IztdKHRibT1pc2NofHRicz1zYml8dGJzPXNpbWcpLzsKICAgIHZhciByeFZpZGVvID0gL1smPyM7XSh0Ym09dmlkKS87CiAgICBbXS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2hkdGIgLmhkdGItbWl0ZW0nKSwgZnVuY3Rpb24obikgewogICAgICBpZiAobi5jbGFzc0xpc3QuY29udGFpbnMoJ2hkdGItbXNlbCcpKSB7IGFjdGl2ZU1lbnVJdGVtID0gbjsgcmV0dXJuOyB9CiAgICAgIGlmIChuLmlubmVySFRNTC5tYXRjaChyeEltYWdlKSkgeyBpbWFnZXMgPSBuOyByZXR1cm47IH0KICAgICAgaWYgKG4uaW5uZXJIVE1MLm1hdGNoKHJ4VmlkZW8pKSB7IHZpZGVvcyA9IG47IHJldHVybjsgfQogICAgfSk7CiAgICBpbWFnZXMgPSAhaW1hZ2VzICYmIGxvY2F0aW9uLmhyZWYubWF0Y2gocnhJbWFnZSkgPyBhY3RpdmVNZW51SXRlbSA6IGltYWdlczsKICAgIHZpZGVvcyA9ICF2aWRlb3MgJiYgbG9jYXRpb24uaHJlZi5tYXRjaChyeFZpZGVvKSA/IGFjdGl2ZU1lbnVJdGVtIDogdmlkZW9zOwoKICAgIGlmIChpbWFnZXMgJiYgaW1hZ2VzLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgIT0gbWVudS5maXJzdEVsZW1lbnRDaGlsZCkKICAgICAgbWVudS5pbnNlcnRCZWZvcmUoaW1hZ2VzLCBtZW51LmZpcnN0RWxlbWVudENoaWxkLm5leHRFbGVtZW50U2libGluZyk7CgogICAgaWYgKHZpZGVvcykgewogICAgICBpZiAodmlkZW9zLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgIT0gKGltYWdlcyB8fCBtZW51LmZpcnN0RWxlbWVudENoaWxkKSkKICAgICAgICBtZW51Lmluc2VydEJlZm9yZSh2aWRlb3MsIChpbWFnZXMgfHwgbWVudS5maXJzdEVsZW1lbnRDaGlsZCkubmV4dEVsZW1lbnRTaWJsaW5nKTsKICAgICAgbm9kZSA9IHZpZGVvczsKICAgICAgcGxhY2UgPSAnYWZ0ZXJlbmQnOwogICAgfQoKICAgIGlmICh5b3V0dWJlKSB7CgkgIG5vZGUgPSB2aWRlb3MgfHwgaW1hZ2VzIHx8IG1lbnUubGFzdEVsZW1lbnRDaGlsZDsKCSAgaWYgKHlvdXR1YmUucHJldmlvdXNFbGVtZW50U2libGluZyAhPSBub2RlKQoJCXlvdXR1YmUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoeW91dHViZSwgbm9kZS5uZXh0RWxlbWVudFNpYmxpbmcpOwogICAgfQogIH0KCiAgaWYgKCF5b3V0dWJlKSB7CiAgICB2YXIgcSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2hmb3JtIGlucHV0W2Rpcl0nKTsKICAgIGlmIChxKSBxID0gZW5jb2RlVVJJQ29tcG9uZW50KHEudmFsdWUpOwogICAgZWxzZSBpZiAocSA9IGxvY2F0aW9uLmhyZWYubWF0Y2goL14uKz8oPzpbI1wvJj9dKD86cXxxdWVyeSkpPSguKz8pKD86fCYuK3xcfC4rKSQvKSkKICAgICAgcSA9IHFbMV07CiAgICBlbHNlIHEgPSAnJzsKICAgIG5vZGUuaW5zZXJ0QWRqYWNlbnRIVE1MKHBsYWNlLAogICAgICAnPGRpdiBjbGFzcz0iaGR0Yi1taXRlbSBoZHRiLWltYiIgaWQ9Il9fWU9VVFVCRV9TRUFSQ0hfXyI+XAogICAgICAgICA8YSBjbGFzcz0icSBxcyIgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vcmVzdWx0cz9zZWFyY2hfcXVlcnk9JyArIHEgKyAnIj5Zb3V0dWJlPC9hPlwKICAgICAgPC9kaXY+Jyk7CiAgfQogIHN0YXRlKys7CiAgLyoKICBjb25zb2xlLmxvZyhbc3RhdGUsCiAgICAgICAgICAgICAgIGltYWdlcywgaW1hZ2VzICYmIGltYWdlcy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09IG1lbnUuZmlyc3RFbGVtZW50Q2hpbGQsCiAgICAgICAgICAgICAgIHZpZGVvcywgdmlkZW9zICYmIHZpZGVvcy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09IGltYWdlcywKICAgICAgICAgICAgICAgeW91dHViZSwgeW91dHViZSAmJiB5b3V0dWJlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgPT0gdmlkZW9zIHx8IGltYWdlc10pCiAgKi8KfSk7Cg=="}],"settings":{"action_menu_columns":"2","action_menu_scripts_hide_disabled":false,"action_menu_scripts_sort":"position","appearance_badge_color":"#ff0000","appearance_badges":"running","autoReload":true,"configMode":100,"connect_mode":"casual","debug":false,"editor_autoLint":true,"editor_autoLintMaxLen":"50000","editor_autoSave":false,"editor_easySave":true,"editor_electricChars":true,"editor_enabled":true,"editor_fontSize":"110","editor_highlightTrailingWhitespace":true,"editor_indentUnit":"4","editor_indentWithTabs":"spaces","editor_keyMap":"vim","editor_lineWrapping":true,"editor_tabMode":"indent","editor_theme":"monokai","enabled":true,"notification_silentScriptUpdate":false,"scriptUpdateCheckDisabled":false,"scriptUpdateCheckPeriod":604800000,"scriptUpdateHideNotificationAfter":3600000,"script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":"2"},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":"3"}],"showFixedSrc":false}}